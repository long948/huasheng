<?php
namespace CoinService;

/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


final class CoinProtocol {
  const ETH = 1;
  const BTC = 2;
  const Omni = 3;
  const Eos = 4;
  static public $__names = array(
    1 => 'ETH',
    2 => 'BTC',
    3 => 'Omni',
    4 => 'Eos',
  );
}

final class WithdrawResult {
  const Success = 1;
  const NotEnoughBalance = 2;
  const NotEnoughFee = 3;
  const Error = 4;
  const CantWithdraw = 5;
  const MinWithdraw = 6;
  const MaxWithdraw = 7;
  static public $__names = array(
    1 => 'Success',
    2 => 'NotEnoughBalance',
    3 => 'NotEnoughFee',
    4 => 'Error',
    5 => 'CantWithdraw',
    6 => 'MinWithdraw',
    7 => 'MaxWithdraw',
  );
}

final class AuthWithdrawEnum {
  const Reject = 0;
  const Process = 1;
  const Success = 2;
  static public $__names = array(
    0 => 'Reject',
    1 => 'Process',
    2 => 'Success',
  );
}

final class AuthWithdrawResult {
  const Success = 1;
  const StatusErr = 2;
  const Error = 3;
  static public $__names = array(
    1 => 'Success',
    2 => 'StatusErr',
    3 => 'Error',
  );
}

class CoinModel {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'Id',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'Name',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'EnName',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'FullName',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'Logo',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    6 => array(
      'var' => 'AddTime',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    7 => array(
      'var' => 'Price',
      'isRequired' => false,
      'type' => TType::DOUBLE,
      ),
    8 => array(
      'var' => 'Description',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    9 => array(
      'var' => 'PublishTime',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    10 => array(
      'var' => 'PublishNum',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    11 => array(
      'var' => 'CirculationNum',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    12 => array(
      'var' => 'CrowdPrice',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    13 => array(
      'var' => 'WhitePaper',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    14 => array(
      'var' => 'WebUrl',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    16 => array(
      'var' => 'Browser',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    17 => array(
      'var' => 'WithDrawFee',
      'isRequired' => false,
      'type' => TType::DOUBLE,
      ),
    18 => array(
      'var' => 'MinWithDrawFee',
      'isRequired' => false,
      'type' => TType::DOUBLE,
      ),
    19 => array(
      'var' => 'IsWithDraw',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    20 => array(
      'var' => 'IsRecharge',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    21 => array(
      'var' => 'Status',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    22 => array(
      'var' => 'RPCServer',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    23 => array(
      'var' => 'RPCUser',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    24 => array(
      'var' => 'RPCPassword',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    25 => array(
      'var' => 'MinWithDraw',
      'isRequired' => false,
      'type' => TType::DOUBLE,
      ),
    26 => array(
      'var' => 'MinRecharge',
      'isRequired' => false,
      'type' => TType::DOUBLE,
      ),
    27 => array(
      'var' => 'MaxWithDraw',
      'isRequired' => false,
      'type' => TType::DOUBLE,
      ),
    28 => array(
      'var' => 'Fixed',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    29 => array(
      'var' => 'RechargeInfo',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    30 => array(
      'var' => 'WithDrawInfo',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    31 => array(
      'var' => 'Confirms',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    32 => array(
      'var' => 'WalletUrl',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    33 => array(
      'var' => 'MobileWalletUrl',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    34 => array(
      'var' => 'Protocol',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    35 => array(
      'var' => 'Sort',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    36 => array(
      'var' => 'IsAutoWithDraw',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    37 => array(
      'var' => 'MainAddress',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    38 => array(
      'var' => 'Ext',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    39 => array(
      'var' => 'Decimals',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    );

  /**
   * @var int
   */
  public $Id = null;
  /**
   * @var string
   */
  public $Name = null;
  /**
   * @var string
   */
  public $EnName = null;
  /**
   * @var string
   */
  public $FullName = null;
  /**
   * @var string
   */
  public $Logo = null;
  /**
   * @var int
   */
  public $AddTime = null;
  /**
   * @var double
   */
  public $Price = null;
  /**
   * @var string
   */
  public $Description = null;
  /**
   * @var int
   */
  public $PublishTime = null;
  /**
   * @var string
   */
  public $PublishNum = null;
  /**
   * @var string
   */
  public $CirculationNum = null;
  /**
   * @var string
   */
  public $CrowdPrice = null;
  /**
   * @var string
   */
  public $WhitePaper = null;
  /**
   * @var string
   */
  public $WebUrl = null;
  /**
   * @var string
   */
  public $Browser = null;
  /**
   * @var double
   */
  public $WithDrawFee = null;
  /**
   * @var double
   */
  public $MinWithDrawFee = null;
  /**
   * @var bool
   */
  public $IsWithDraw = null;
  /**
   * @var bool
   */
  public $IsRecharge = null;
  /**
   * @var int
   */
  public $Status = null;
  /**
   * @var string
   */
  public $RPCServer = null;
  /**
   * @var string
   */
  public $RPCUser = null;
  /**
   * @var string
   */
  public $RPCPassword = null;
  /**
   * @var double
   */
  public $MinWithDraw = null;
  /**
   * @var double
   */
  public $MinRecharge = null;
  /**
   * @var double
   */
  public $MaxWithDraw = null;
  /**
   * @var int
   */
  public $Fixed = null;
  /**
   * @var string
   */
  public $RechargeInfo = null;
  /**
   * @var string
   */
  public $WithDrawInfo = null;
  /**
   * @var int
   */
  public $Confirms = null;
  /**
   * @var string
   */
  public $WalletUrl = null;
  /**
   * @var string
   */
  public $MobileWalletUrl = null;
  /**
   * @var int
   */
  public $Protocol = null;
  /**
   * @var int
   */
  public $Sort = null;
  /**
   * @var bool
   */
  public $IsAutoWithDraw = null;
  /**
   * @var string
   */
  public $MainAddress = null;
  /**
   * @var string
   */
  public $Ext = null;
  /**
   * @var int
   */
  public $Decimals = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['Id'])) {
        $this->Id = $vals['Id'];
      }
      if (isset($vals['Name'])) {
        $this->Name = $vals['Name'];
      }
      if (isset($vals['EnName'])) {
        $this->EnName = $vals['EnName'];
      }
      if (isset($vals['FullName'])) {
        $this->FullName = $vals['FullName'];
      }
      if (isset($vals['Logo'])) {
        $this->Logo = $vals['Logo'];
      }
      if (isset($vals['AddTime'])) {
        $this->AddTime = $vals['AddTime'];
      }
      if (isset($vals['Price'])) {
        $this->Price = $vals['Price'];
      }
      if (isset($vals['Description'])) {
        $this->Description = $vals['Description'];
      }
      if (isset($vals['PublishTime'])) {
        $this->PublishTime = $vals['PublishTime'];
      }
      if (isset($vals['PublishNum'])) {
        $this->PublishNum = $vals['PublishNum'];
      }
      if (isset($vals['CirculationNum'])) {
        $this->CirculationNum = $vals['CirculationNum'];
      }
      if (isset($vals['CrowdPrice'])) {
        $this->CrowdPrice = $vals['CrowdPrice'];
      }
      if (isset($vals['WhitePaper'])) {
        $this->WhitePaper = $vals['WhitePaper'];
      }
      if (isset($vals['WebUrl'])) {
        $this->WebUrl = $vals['WebUrl'];
      }
      if (isset($vals['Browser'])) {
        $this->Browser = $vals['Browser'];
      }
      if (isset($vals['WithDrawFee'])) {
        $this->WithDrawFee = $vals['WithDrawFee'];
      }
      if (isset($vals['MinWithDrawFee'])) {
        $this->MinWithDrawFee = $vals['MinWithDrawFee'];
      }
      if (isset($vals['IsWithDraw'])) {
        $this->IsWithDraw = $vals['IsWithDraw'];
      }
      if (isset($vals['IsRecharge'])) {
        $this->IsRecharge = $vals['IsRecharge'];
      }
      if (isset($vals['Status'])) {
        $this->Status = $vals['Status'];
      }
      if (isset($vals['RPCServer'])) {
        $this->RPCServer = $vals['RPCServer'];
      }
      if (isset($vals['RPCUser'])) {
        $this->RPCUser = $vals['RPCUser'];
      }
      if (isset($vals['RPCPassword'])) {
        $this->RPCPassword = $vals['RPCPassword'];
      }
      if (isset($vals['MinWithDraw'])) {
        $this->MinWithDraw = $vals['MinWithDraw'];
      }
      if (isset($vals['MinRecharge'])) {
        $this->MinRecharge = $vals['MinRecharge'];
      }
      if (isset($vals['MaxWithDraw'])) {
        $this->MaxWithDraw = $vals['MaxWithDraw'];
      }
      if (isset($vals['Fixed'])) {
        $this->Fixed = $vals['Fixed'];
      }
      if (isset($vals['RechargeInfo'])) {
        $this->RechargeInfo = $vals['RechargeInfo'];
      }
      if (isset($vals['WithDrawInfo'])) {
        $this->WithDrawInfo = $vals['WithDrawInfo'];
      }
      if (isset($vals['Confirms'])) {
        $this->Confirms = $vals['Confirms'];
      }
      if (isset($vals['WalletUrl'])) {
        $this->WalletUrl = $vals['WalletUrl'];
      }
      if (isset($vals['MobileWalletUrl'])) {
        $this->MobileWalletUrl = $vals['MobileWalletUrl'];
      }
      if (isset($vals['Protocol'])) {
        $this->Protocol = $vals['Protocol'];
      }
      if (isset($vals['Sort'])) {
        $this->Sort = $vals['Sort'];
      }
      if (isset($vals['IsAutoWithDraw'])) {
        $this->IsAutoWithDraw = $vals['IsAutoWithDraw'];
      }
      if (isset($vals['MainAddress'])) {
        $this->MainAddress = $vals['MainAddress'];
      }
      if (isset($vals['Ext'])) {
        $this->Ext = $vals['Ext'];
      }
      if (isset($vals['Decimals'])) {
        $this->Decimals = $vals['Decimals'];
      }
    }
  }

  public function getName() {
    return 'CoinModel';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->Id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->Name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->EnName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->FullName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->Logo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->AddTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->Price);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->Description);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->PublishTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->PublishNum);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->CirculationNum);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->CrowdPrice);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->WhitePaper);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->WebUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->Browser);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->WithDrawFee);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 18:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->MinWithDrawFee);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 19:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->IsWithDraw);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->IsRecharge);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 21:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->Status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 22:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->RPCServer);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 23:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->RPCUser);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 24:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->RPCPassword);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 25:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->MinWithDraw);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 26:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->MinRecharge);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 27:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->MaxWithDraw);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 28:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->Fixed);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 29:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->RechargeInfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 30:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->WithDrawInfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 31:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->Confirms);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 32:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->WalletUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 33:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->MobileWalletUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 34:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->Protocol);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 35:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->Sort);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 36:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->IsAutoWithDraw);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 37:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->MainAddress);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 38:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->Ext);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 39:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->Decimals);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CoinModel');
    if ($this->Id !== null) {
      $xfer += $output->writeFieldBegin('Id', TType::I32, 1);
      $xfer += $output->writeI32($this->Id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Name !== null) {
      $xfer += $output->writeFieldBegin('Name', TType::STRING, 2);
      $xfer += $output->writeString($this->Name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->EnName !== null) {
      $xfer += $output->writeFieldBegin('EnName', TType::STRING, 3);
      $xfer += $output->writeString($this->EnName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->FullName !== null) {
      $xfer += $output->writeFieldBegin('FullName', TType::STRING, 4);
      $xfer += $output->writeString($this->FullName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Logo !== null) {
      $xfer += $output->writeFieldBegin('Logo', TType::STRING, 5);
      $xfer += $output->writeString($this->Logo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->AddTime !== null) {
      $xfer += $output->writeFieldBegin('AddTime', TType::I64, 6);
      $xfer += $output->writeI64($this->AddTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Price !== null) {
      $xfer += $output->writeFieldBegin('Price', TType::DOUBLE, 7);
      $xfer += $output->writeDouble($this->Price);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Description !== null) {
      $xfer += $output->writeFieldBegin('Description', TType::STRING, 8);
      $xfer += $output->writeString($this->Description);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->PublishTime !== null) {
      $xfer += $output->writeFieldBegin('PublishTime', TType::I64, 9);
      $xfer += $output->writeI64($this->PublishTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->PublishNum !== null) {
      $xfer += $output->writeFieldBegin('PublishNum', TType::STRING, 10);
      $xfer += $output->writeString($this->PublishNum);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->CirculationNum !== null) {
      $xfer += $output->writeFieldBegin('CirculationNum', TType::STRING, 11);
      $xfer += $output->writeString($this->CirculationNum);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->CrowdPrice !== null) {
      $xfer += $output->writeFieldBegin('CrowdPrice', TType::STRING, 12);
      $xfer += $output->writeString($this->CrowdPrice);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->WhitePaper !== null) {
      $xfer += $output->writeFieldBegin('WhitePaper', TType::STRING, 13);
      $xfer += $output->writeString($this->WhitePaper);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->WebUrl !== null) {
      $xfer += $output->writeFieldBegin('WebUrl', TType::STRING, 14);
      $xfer += $output->writeString($this->WebUrl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Browser !== null) {
      $xfer += $output->writeFieldBegin('Browser', TType::STRING, 16);
      $xfer += $output->writeString($this->Browser);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->WithDrawFee !== null) {
      $xfer += $output->writeFieldBegin('WithDrawFee', TType::DOUBLE, 17);
      $xfer += $output->writeDouble($this->WithDrawFee);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->MinWithDrawFee !== null) {
      $xfer += $output->writeFieldBegin('MinWithDrawFee', TType::DOUBLE, 18);
      $xfer += $output->writeDouble($this->MinWithDrawFee);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->IsWithDraw !== null) {
      $xfer += $output->writeFieldBegin('IsWithDraw', TType::BOOL, 19);
      $xfer += $output->writeBool($this->IsWithDraw);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->IsRecharge !== null) {
      $xfer += $output->writeFieldBegin('IsRecharge', TType::BOOL, 20);
      $xfer += $output->writeBool($this->IsRecharge);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Status !== null) {
      $xfer += $output->writeFieldBegin('Status', TType::I32, 21);
      $xfer += $output->writeI32($this->Status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->RPCServer !== null) {
      $xfer += $output->writeFieldBegin('RPCServer', TType::STRING, 22);
      $xfer += $output->writeString($this->RPCServer);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->RPCUser !== null) {
      $xfer += $output->writeFieldBegin('RPCUser', TType::STRING, 23);
      $xfer += $output->writeString($this->RPCUser);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->RPCPassword !== null) {
      $xfer += $output->writeFieldBegin('RPCPassword', TType::STRING, 24);
      $xfer += $output->writeString($this->RPCPassword);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->MinWithDraw !== null) {
      $xfer += $output->writeFieldBegin('MinWithDraw', TType::DOUBLE, 25);
      $xfer += $output->writeDouble($this->MinWithDraw);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->MinRecharge !== null) {
      $xfer += $output->writeFieldBegin('MinRecharge', TType::DOUBLE, 26);
      $xfer += $output->writeDouble($this->MinRecharge);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->MaxWithDraw !== null) {
      $xfer += $output->writeFieldBegin('MaxWithDraw', TType::DOUBLE, 27);
      $xfer += $output->writeDouble($this->MaxWithDraw);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Fixed !== null) {
      $xfer += $output->writeFieldBegin('Fixed', TType::I32, 28);
      $xfer += $output->writeI32($this->Fixed);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->RechargeInfo !== null) {
      $xfer += $output->writeFieldBegin('RechargeInfo', TType::STRING, 29);
      $xfer += $output->writeString($this->RechargeInfo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->WithDrawInfo !== null) {
      $xfer += $output->writeFieldBegin('WithDrawInfo', TType::STRING, 30);
      $xfer += $output->writeString($this->WithDrawInfo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Confirms !== null) {
      $xfer += $output->writeFieldBegin('Confirms', TType::I32, 31);
      $xfer += $output->writeI32($this->Confirms);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->WalletUrl !== null) {
      $xfer += $output->writeFieldBegin('WalletUrl', TType::STRING, 32);
      $xfer += $output->writeString($this->WalletUrl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->MobileWalletUrl !== null) {
      $xfer += $output->writeFieldBegin('MobileWalletUrl', TType::STRING, 33);
      $xfer += $output->writeString($this->MobileWalletUrl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Protocol !== null) {
      $xfer += $output->writeFieldBegin('Protocol', TType::I32, 34);
      $xfer += $output->writeI32($this->Protocol);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Sort !== null) {
      $xfer += $output->writeFieldBegin('Sort', TType::I32, 35);
      $xfer += $output->writeI32($this->Sort);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->IsAutoWithDraw !== null) {
      $xfer += $output->writeFieldBegin('IsAutoWithDraw', TType::BOOL, 36);
      $xfer += $output->writeBool($this->IsAutoWithDraw);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->MainAddress !== null) {
      $xfer += $output->writeFieldBegin('MainAddress', TType::STRING, 37);
      $xfer += $output->writeString($this->MainAddress);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Ext !== null) {
      $xfer += $output->writeFieldBegin('Ext', TType::STRING, 38);
      $xfer += $output->writeString($this->Ext);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Decimals !== null) {
      $xfer += $output->writeFieldBegin('Decimals', TType::I32, 39);
      $xfer += $output->writeI32($this->Decimals);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MemberCoinModel {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'Id',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'MemberId',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    3 => array(
      'var' => 'Mobile',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'CoinId',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    5 => array(
      'var' => 'CoinName',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    6 => array(
      'var' => 'Money',
      'isRequired' => false,
      'type' => TType::DOUBLE,
      ),
    7 => array(
      'var' => 'Forzen',
      'isRequired' => false,
      'type' => TType::DOUBLE,
      ),
    8 => array(
      'var' => 'Address',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var int
   */
  public $Id = null;
  /**
   * @var int
   */
  public $MemberId = null;
  /**
   * @var string
   */
  public $Mobile = null;
  /**
   * @var int
   */
  public $CoinId = null;
  /**
   * @var string
   */
  public $CoinName = null;
  /**
   * @var double
   */
  public $Money = null;
  /**
   * @var double
   */
  public $Forzen = null;
  /**
   * @var string
   */
  public $Address = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['Id'])) {
        $this->Id = $vals['Id'];
      }
      if (isset($vals['MemberId'])) {
        $this->MemberId = $vals['MemberId'];
      }
      if (isset($vals['Mobile'])) {
        $this->Mobile = $vals['Mobile'];
      }
      if (isset($vals['CoinId'])) {
        $this->CoinId = $vals['CoinId'];
      }
      if (isset($vals['CoinName'])) {
        $this->CoinName = $vals['CoinName'];
      }
      if (isset($vals['Money'])) {
        $this->Money = $vals['Money'];
      }
      if (isset($vals['Forzen'])) {
        $this->Forzen = $vals['Forzen'];
      }
      if (isset($vals['Address'])) {
        $this->Address = $vals['Address'];
      }
    }
  }

  public function getName() {
    return 'MemberCoinModel';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->Id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->MemberId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->Mobile);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->CoinId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->CoinName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->Money);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->Forzen);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->Address);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MemberCoinModel');
    if ($this->Id !== null) {
      $xfer += $output->writeFieldBegin('Id', TType::I32, 1);
      $xfer += $output->writeI32($this->Id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->MemberId !== null) {
      $xfer += $output->writeFieldBegin('MemberId', TType::I32, 2);
      $xfer += $output->writeI32($this->MemberId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Mobile !== null) {
      $xfer += $output->writeFieldBegin('Mobile', TType::STRING, 3);
      $xfer += $output->writeString($this->Mobile);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->CoinId !== null) {
      $xfer += $output->writeFieldBegin('CoinId', TType::I32, 4);
      $xfer += $output->writeI32($this->CoinId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->CoinName !== null) {
      $xfer += $output->writeFieldBegin('CoinName', TType::STRING, 5);
      $xfer += $output->writeString($this->CoinName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Money !== null) {
      $xfer += $output->writeFieldBegin('Money', TType::DOUBLE, 6);
      $xfer += $output->writeDouble($this->Money);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Forzen !== null) {
      $xfer += $output->writeFieldBegin('Forzen', TType::DOUBLE, 7);
      $xfer += $output->writeDouble($this->Forzen);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Address !== null) {
      $xfer += $output->writeFieldBegin('Address', TType::STRING, 8);
      $xfer += $output->writeString($this->Address);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class RechargeModel {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'Id',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'Hash',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'md5',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'MemberId',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    5 => array(
      'var' => 'Mobile',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    6 => array(
      'var' => 'CoinId',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    7 => array(
      'var' => 'CoinName',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    8 => array(
      'var' => 'Money',
      'isRequired' => false,
      'type' => TType::DOUBLE,
      ),
    9 => array(
      'var' => 'AddTime',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    10 => array(
      'var' => 'Block',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    11 => array(
      'var' => 'Confirms',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    12 => array(
      'var' => 'NConfirms',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    13 => array(
      'var' => 'Status',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    14 => array(
      'var' => 'Send',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    15 => array(
      'var' => 'Address',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var int
   */
  public $Id = null;
  /**
   * @var string
   */
  public $Hash = null;
  /**
   * @var string
   */
  public $md5 = null;
  /**
   * @var int
   */
  public $MemberId = null;
  /**
   * @var string
   */
  public $Mobile = null;
  /**
   * @var int
   */
  public $CoinId = null;
  /**
   * @var string
   */
  public $CoinName = null;
  /**
   * @var double
   */
  public $Money = null;
  /**
   * @var int
   */
  public $AddTime = null;
  /**
   * @var int
   */
  public $Block = null;
  /**
   * @var int
   */
  public $Confirms = null;
  /**
   * @var int
   */
  public $NConfirms = null;
  /**
   * @var int
   */
  public $Status = null;
  /**
   * @var string
   */
  public $Send = null;
  /**
   * @var string
   */
  public $Address = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['Id'])) {
        $this->Id = $vals['Id'];
      }
      if (isset($vals['Hash'])) {
        $this->Hash = $vals['Hash'];
      }
      if (isset($vals['md5'])) {
        $this->md5 = $vals['md5'];
      }
      if (isset($vals['MemberId'])) {
        $this->MemberId = $vals['MemberId'];
      }
      if (isset($vals['Mobile'])) {
        $this->Mobile = $vals['Mobile'];
      }
      if (isset($vals['CoinId'])) {
        $this->CoinId = $vals['CoinId'];
      }
      if (isset($vals['CoinName'])) {
        $this->CoinName = $vals['CoinName'];
      }
      if (isset($vals['Money'])) {
        $this->Money = $vals['Money'];
      }
      if (isset($vals['AddTime'])) {
        $this->AddTime = $vals['AddTime'];
      }
      if (isset($vals['Block'])) {
        $this->Block = $vals['Block'];
      }
      if (isset($vals['Confirms'])) {
        $this->Confirms = $vals['Confirms'];
      }
      if (isset($vals['NConfirms'])) {
        $this->NConfirms = $vals['NConfirms'];
      }
      if (isset($vals['Status'])) {
        $this->Status = $vals['Status'];
      }
      if (isset($vals['Send'])) {
        $this->Send = $vals['Send'];
      }
      if (isset($vals['Address'])) {
        $this->Address = $vals['Address'];
      }
    }
  }

  public function getName() {
    return 'RechargeModel';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->Id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->Hash);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->md5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->MemberId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->Mobile);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->CoinId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->CoinName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->Money);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->AddTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->Block);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->Confirms);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->NConfirms);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->Status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->Send);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->Address);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('RechargeModel');
    if ($this->Id !== null) {
      $xfer += $output->writeFieldBegin('Id', TType::I32, 1);
      $xfer += $output->writeI32($this->Id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Hash !== null) {
      $xfer += $output->writeFieldBegin('Hash', TType::STRING, 2);
      $xfer += $output->writeString($this->Hash);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->md5 !== null) {
      $xfer += $output->writeFieldBegin('md5', TType::STRING, 3);
      $xfer += $output->writeString($this->md5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->MemberId !== null) {
      $xfer += $output->writeFieldBegin('MemberId', TType::I32, 4);
      $xfer += $output->writeI32($this->MemberId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Mobile !== null) {
      $xfer += $output->writeFieldBegin('Mobile', TType::STRING, 5);
      $xfer += $output->writeString($this->Mobile);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->CoinId !== null) {
      $xfer += $output->writeFieldBegin('CoinId', TType::I32, 6);
      $xfer += $output->writeI32($this->CoinId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->CoinName !== null) {
      $xfer += $output->writeFieldBegin('CoinName', TType::STRING, 7);
      $xfer += $output->writeString($this->CoinName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Money !== null) {
      $xfer += $output->writeFieldBegin('Money', TType::DOUBLE, 8);
      $xfer += $output->writeDouble($this->Money);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->AddTime !== null) {
      $xfer += $output->writeFieldBegin('AddTime', TType::I64, 9);
      $xfer += $output->writeI64($this->AddTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Block !== null) {
      $xfer += $output->writeFieldBegin('Block', TType::I32, 10);
      $xfer += $output->writeI32($this->Block);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Confirms !== null) {
      $xfer += $output->writeFieldBegin('Confirms', TType::I32, 11);
      $xfer += $output->writeI32($this->Confirms);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->NConfirms !== null) {
      $xfer += $output->writeFieldBegin('NConfirms', TType::I32, 12);
      $xfer += $output->writeI32($this->NConfirms);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Status !== null) {
      $xfer += $output->writeFieldBegin('Status', TType::I32, 13);
      $xfer += $output->writeI32($this->Status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Send !== null) {
      $xfer += $output->writeFieldBegin('Send', TType::STRING, 14);
      $xfer += $output->writeString($this->Send);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Address !== null) {
      $xfer += $output->writeFieldBegin('Address', TType::STRING, 15);
      $xfer += $output->writeString($this->Address);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class WithdrawModel {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'id',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'CoinId',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    3 => array(
      'var' => 'MemberId',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    4 => array(
      'var' => 'Mobile',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'Address',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    6 => array(
      'var' => 'Money',
      'isRequired' => false,
      'type' => TType::DOUBLE,
      ),
    7 => array(
      'var' => 'Fee',
      'isRequired' => false,
      'type' => TType::DOUBLE,
      ),
    8 => array(
      'var' => 'Real',
      'isRequired' => false,
      'type' => TType::DOUBLE,
      ),
    9 => array(
      'var' => 'Balance',
      'isRequired' => false,
      'type' => TType::DOUBLE,
      ),
    10 => array(
      'var' => 'ProcessMold',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    11 => array(
      'var' => 'Hash',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    12 => array(
      'var' => 'Status',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    13 => array(
      'var' => 'AddTime',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    14 => array(
      'var' => 'ProcessTime',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    15 => array(
      'var' => 'WithdrawInfo',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    16 => array(
      'var' => 'CoinName',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    17 => array(
      'var' => 'Remark',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    18 => array(
      'var' => 'FeeCoin',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    19 => array(
      'var' => 'FeeCoinEname',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var int
   */
  public $id = null;
  /**
   * @var int
   */
  public $CoinId = null;
  /**
   * @var int
   */
  public $MemberId = null;
  /**
   * @var string
   */
  public $Mobile = null;
  /**
   * @var string
   */
  public $Address = null;
  /**
   * @var double
   */
  public $Money = null;
  /**
   * @var double
   */
  public $Fee = null;
  /**
   * @var double
   */
  public $Real = null;
  /**
   * @var double
   */
  public $Balance = null;
  /**
   * @var int
   */
  public $ProcessMold = null;
  /**
   * @var string
   */
  public $Hash = null;
  /**
   * @var int
   */
  public $Status = null;
  /**
   * @var int
   */
  public $AddTime = null;
  /**
   * @var int
   */
  public $ProcessTime = null;
  /**
   * @var string
   */
  public $WithdrawInfo = null;
  /**
   * @var string
   */
  public $CoinName = null;
  /**
   * @var string
   */
  public $Remark = null;
  /**
   * @var int
   */
  public $FeeCoin = null;
  /**
   * @var string
   */
  public $FeeCoinEname = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['CoinId'])) {
        $this->CoinId = $vals['CoinId'];
      }
      if (isset($vals['MemberId'])) {
        $this->MemberId = $vals['MemberId'];
      }
      if (isset($vals['Mobile'])) {
        $this->Mobile = $vals['Mobile'];
      }
      if (isset($vals['Address'])) {
        $this->Address = $vals['Address'];
      }
      if (isset($vals['Money'])) {
        $this->Money = $vals['Money'];
      }
      if (isset($vals['Fee'])) {
        $this->Fee = $vals['Fee'];
      }
      if (isset($vals['Real'])) {
        $this->Real = $vals['Real'];
      }
      if (isset($vals['Balance'])) {
        $this->Balance = $vals['Balance'];
      }
      if (isset($vals['ProcessMold'])) {
        $this->ProcessMold = $vals['ProcessMold'];
      }
      if (isset($vals['Hash'])) {
        $this->Hash = $vals['Hash'];
      }
      if (isset($vals['Status'])) {
        $this->Status = $vals['Status'];
      }
      if (isset($vals['AddTime'])) {
        $this->AddTime = $vals['AddTime'];
      }
      if (isset($vals['ProcessTime'])) {
        $this->ProcessTime = $vals['ProcessTime'];
      }
      if (isset($vals['WithdrawInfo'])) {
        $this->WithdrawInfo = $vals['WithdrawInfo'];
      }
      if (isset($vals['CoinName'])) {
        $this->CoinName = $vals['CoinName'];
      }
      if (isset($vals['Remark'])) {
        $this->Remark = $vals['Remark'];
      }
      if (isset($vals['FeeCoin'])) {
        $this->FeeCoin = $vals['FeeCoin'];
      }
      if (isset($vals['FeeCoinEname'])) {
        $this->FeeCoinEname = $vals['FeeCoinEname'];
      }
    }
  }

  public function getName() {
    return 'WithdrawModel';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->CoinId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->MemberId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->Mobile);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->Address);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->Money);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->Fee);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->Real);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->Balance);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ProcessMold);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->Hash);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->Status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->AddTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->ProcessTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->WithdrawInfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->CoinName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->Remark);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 18:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->FeeCoin);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 19:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->FeeCoinEname);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('WithdrawModel');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I32, 1);
      $xfer += $output->writeI32($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->CoinId !== null) {
      $xfer += $output->writeFieldBegin('CoinId', TType::I32, 2);
      $xfer += $output->writeI32($this->CoinId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->MemberId !== null) {
      $xfer += $output->writeFieldBegin('MemberId', TType::I32, 3);
      $xfer += $output->writeI32($this->MemberId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Mobile !== null) {
      $xfer += $output->writeFieldBegin('Mobile', TType::STRING, 4);
      $xfer += $output->writeString($this->Mobile);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Address !== null) {
      $xfer += $output->writeFieldBegin('Address', TType::STRING, 5);
      $xfer += $output->writeString($this->Address);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Money !== null) {
      $xfer += $output->writeFieldBegin('Money', TType::DOUBLE, 6);
      $xfer += $output->writeDouble($this->Money);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Fee !== null) {
      $xfer += $output->writeFieldBegin('Fee', TType::DOUBLE, 7);
      $xfer += $output->writeDouble($this->Fee);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Real !== null) {
      $xfer += $output->writeFieldBegin('Real', TType::DOUBLE, 8);
      $xfer += $output->writeDouble($this->Real);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Balance !== null) {
      $xfer += $output->writeFieldBegin('Balance', TType::DOUBLE, 9);
      $xfer += $output->writeDouble($this->Balance);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ProcessMold !== null) {
      $xfer += $output->writeFieldBegin('ProcessMold', TType::I32, 10);
      $xfer += $output->writeI32($this->ProcessMold);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Hash !== null) {
      $xfer += $output->writeFieldBegin('Hash', TType::STRING, 11);
      $xfer += $output->writeString($this->Hash);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Status !== null) {
      $xfer += $output->writeFieldBegin('Status', TType::I32, 12);
      $xfer += $output->writeI32($this->Status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->AddTime !== null) {
      $xfer += $output->writeFieldBegin('AddTime', TType::I64, 13);
      $xfer += $output->writeI64($this->AddTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ProcessTime !== null) {
      $xfer += $output->writeFieldBegin('ProcessTime', TType::I64, 14);
      $xfer += $output->writeI64($this->ProcessTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->WithdrawInfo !== null) {
      $xfer += $output->writeFieldBegin('WithdrawInfo', TType::STRING, 15);
      $xfer += $output->writeString($this->WithdrawInfo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->CoinName !== null) {
      $xfer += $output->writeFieldBegin('CoinName', TType::STRING, 16);
      $xfer += $output->writeString($this->CoinName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Remark !== null) {
      $xfer += $output->writeFieldBegin('Remark', TType::STRING, 17);
      $xfer += $output->writeString($this->Remark);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->FeeCoin !== null) {
      $xfer += $output->writeFieldBegin('FeeCoin', TType::I32, 18);
      $xfer += $output->writeI32($this->FeeCoin);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->FeeCoinEname !== null) {
      $xfer += $output->writeFieldBegin('FeeCoinEname', TType::STRING, 19);
      $xfer += $output->writeString($this->FeeCoinEname);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class withdrawList {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'count',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'wlist',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\CoinService\Model\WithdrawModel',
        ),
      ),
    );

  /**
   * @var int
   */
  public $count = null;
  /**
   * @var \CoinService\Model\WithdrawModel[]
   */
  public $wlist = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['count'])) {
        $this->count = $vals['count'];
      }
      if (isset($vals['wlist'])) {
        $this->wlist = $vals['wlist'];
      }
    }
  }

  public function getName() {
    return 'withdrawList';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->count);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->wlist = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $elem5 = new WithdrawModel();
              $xfer += $elem5->read($input);
              $this->wlist []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('withdrawList');
    if ($this->count !== null) {
      $xfer += $output->writeFieldBegin('count', TType::I32, 1);
      $xfer += $output->writeI32($this->count);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->wlist !== null) {
      if (!is_array($this->wlist)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('wlist', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRUCT, count($this->wlist));
        {
          foreach ($this->wlist as $iter6)
          {
            $xfer += $iter6->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class rechargeList {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'count',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'rlist',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\CoinService\Model\RechargeModel',
        ),
      ),
    );

  /**
   * @var int
   */
  public $count = null;
  /**
   * @var \CoinService\Model\RechargeModel[]
   */
  public $rlist = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['count'])) {
        $this->count = $vals['count'];
      }
      if (isset($vals['rlist'])) {
        $this->rlist = $vals['rlist'];
      }
    }
  }

  public function getName() {
    return 'rechargeList';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->count);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->rlist = array();
            $_size7 = 0;
            $_etype10 = 0;
            $xfer += $input->readListBegin($_etype10, $_size7);
            for ($_i11 = 0; $_i11 < $_size7; ++$_i11)
            {
              $elem12 = null;
              $elem12 = new RechargeModel();
              $xfer += $elem12->read($input);
              $this->rlist []= $elem12;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('rechargeList');
    if ($this->count !== null) {
      $xfer += $output->writeFieldBegin('count', TType::I32, 1);
      $xfer += $output->writeI32($this->count);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->rlist !== null) {
      if (!is_array($this->rlist)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('rlist', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRUCT, count($this->rlist));
        {
          foreach ($this->rlist as $iter13)
          {
            $xfer += $iter13->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AddressResult {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'status',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'msg',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'address',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var int
   */
  public $status = null;
  /**
   * @var string
   */
  public $msg = null;
  /**
   * @var string
   */
  public $address = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['msg'])) {
        $this->msg = $vals['msg'];
      }
      if (isset($vals['address'])) {
        $this->address = $vals['address'];
      }
    }
  }

  public function getName() {
    return 'AddressResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->msg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->address);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AddressResult');
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::I32, 1);
      $xfer += $output->writeI32($this->status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->msg !== null) {
      $xfer += $output->writeFieldBegin('msg', TType::STRING, 2);
      $xfer += $output->writeString($this->msg);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->address !== null) {
      $xfer += $output->writeFieldBegin('address', TType::STRING, 3);
      $xfer += $output->writeString($this->address);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TransferResult {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'status',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'msg',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'hash',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var int
   */
  public $status = null;
  /**
   * @var string
   */
  public $msg = null;
  /**
   * @var string
   */
  public $hash = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['msg'])) {
        $this->msg = $vals['msg'];
      }
      if (isset($vals['hash'])) {
        $this->hash = $vals['hash'];
      }
    }
  }

  public function getName() {
    return 'TransferResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->msg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->hash);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TransferResult');
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::I32, 1);
      $xfer += $output->writeI32($this->status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->msg !== null) {
      $xfer += $output->writeFieldBegin('msg', TType::STRING, 2);
      $xfer += $output->writeString($this->msg);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->hash !== null) {
      $xfer += $output->writeFieldBegin('hash', TType::STRING, 3);
      $xfer += $output->writeString($this->hash);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TransferModel {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'hash',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'send',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'receive',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'money',
      'isRequired' => false,
      'type' => TType::DOUBLE,
      ),
    5 => array(
      'var' => 'block',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    6 => array(
      'var' => 'mold',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    7 => array(
      'var' => 'time',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $hash = null;
  /**
   * @var string
   */
  public $send = null;
  /**
   * @var string
   */
  public $receive = null;
  /**
   * @var double
   */
  public $money = null;
  /**
   * @var int
   */
  public $block = null;
  /**
   * @var int
   */
  public $mold = null;
  /**
   * @var string
   */
  public $time = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['hash'])) {
        $this->hash = $vals['hash'];
      }
      if (isset($vals['send'])) {
        $this->send = $vals['send'];
      }
      if (isset($vals['receive'])) {
        $this->receive = $vals['receive'];
      }
      if (isset($vals['money'])) {
        $this->money = $vals['money'];
      }
      if (isset($vals['block'])) {
        $this->block = $vals['block'];
      }
      if (isset($vals['mold'])) {
        $this->mold = $vals['mold'];
      }
      if (isset($vals['time'])) {
        $this->time = $vals['time'];
      }
    }
  }

  public function getName() {
    return 'TransferModel';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->hash);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->send);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->receive);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->money);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->block);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->mold);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TransferModel');
    if ($this->hash !== null) {
      $xfer += $output->writeFieldBegin('hash', TType::STRING, 1);
      $xfer += $output->writeString($this->hash);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->send !== null) {
      $xfer += $output->writeFieldBegin('send', TType::STRING, 2);
      $xfer += $output->writeString($this->send);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->receive !== null) {
      $xfer += $output->writeFieldBegin('receive', TType::STRING, 3);
      $xfer += $output->writeString($this->receive);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->money !== null) {
      $xfer += $output->writeFieldBegin('money', TType::DOUBLE, 4);
      $xfer += $output->writeDouble($this->money);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->block !== null) {
      $xfer += $output->writeFieldBegin('block', TType::I32, 5);
      $xfer += $output->writeI32($this->block);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->mold !== null) {
      $xfer += $output->writeFieldBegin('mold', TType::I32, 6);
      $xfer += $output->writeI32($this->mold);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->time !== null) {
      $xfer += $output->writeFieldBegin('time', TType::STRING, 7);
      $xfer += $output->writeString($this->time);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class HashCheckResult {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'status',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'confirms',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    3 => array(
      'var' => 'msg',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var int
   */
  public $status = null;
  /**
   * @var int
   */
  public $confirms = null;
  /**
   * @var string
   */
  public $msg = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['confirms'])) {
        $this->confirms = $vals['confirms'];
      }
      if (isset($vals['msg'])) {
        $this->msg = $vals['msg'];
      }
    }
  }

  public function getName() {
    return 'HashCheckResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->confirms);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->msg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('HashCheckResult');
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::I32, 1);
      $xfer += $output->writeI32($this->status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->confirms !== null) {
      $xfer += $output->writeFieldBegin('confirms', TType::I32, 2);
      $xfer += $output->writeI32($this->confirms);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->msg !== null) {
      $xfer += $output->writeFieldBegin('msg', TType::STRING, 3);
      $xfer += $output->writeString($this->msg);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}



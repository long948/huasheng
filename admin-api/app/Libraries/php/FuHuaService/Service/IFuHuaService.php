<?php
namespace FuHuaService\Service;
/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


interface IFuHuaServiceIf {
  /**
   * @return \FuHuaService\Model\FiancingLog
   */
  public function GetConfig();
  /**
   * @param \FuHuaService\Model\FiancingLog $model
   * @return bool
   */
  public function SetConfig($model);
  /**
   * @param int $memberid
   * @return \FuHuaService\Model\FiancingMember
   */
  public function GetFiancingMember($memberid);
  /**
   * @return \FuHuaService\Model\FinancingProduct[]
   */
  public function GetProducts();
  /**
   * @param int $id
   * @return \FuHuaService\Model\FinancingProduct
   */
  public function GetProduct($id);
  /**
   * @param int $PageIndex
   * @param int $PageSize
   * @param string $where
   * @param string $order
   * @return \FuHuaService\Model\FiancingProfitList
   */
  public function GetFiancingProfitList($PageIndex, $PageSize, $where, $order);
  /**
   * @param int $PageIndex
   * @param int $PageSize
   * @param string $where
   * @param string $order
   * @return \FuHuaService\Model\FinancingDetailsList
   */
  public function GetFinancingDetailsList($PageIndex, $PageSize, $where, $order);
  /**
   * @param int $paymold
   * @param int $memberid
   * @param double $num
   * @param int $productid
   * @return int
   */
  public function MemberLockMoney($paymold, $memberid, $num, $productid);
  /**
   * @param int $memberid
   * @param double $money
   * @return int
   */
  public function WithdrawByFuHua($memberid, $money);
  /**
   * @param int $memberid
   * @param double $money
   * @return int
   */
  public function WithdrawByQuYu($memberid, $money);
  /**
   * @param int $PageIndex
   * @param int $PageSize
   * @param string $where
   * @param string $order
   * @param int $memberid
   * @return \FuHuaService\Model\MemberCashLists
   */
  public function GetMemberCashList($PageIndex, $PageSize, $where, $order, $memberid);
  /**
   * @param int $PageIndex
   * @param int $PageSize
   * @param string $where
   * @param string $order
   * @return \FuHuaService\Model\FiancingMemberListResult
   */
  public function GetFiancingMemberList($PageIndex, $PageSize, $where, $order);
  /**
   * @param int $memberid
   * @return \FuHuaService\Model\NoProcess[]
   */
  public function GetNoProcess($memberid);
  /**
   * @param int $memberid
   * @return \FuHuaService\Model\DetailsProfit[]
   */
  public function GetDetailsProfit($memberid);
  /**
   * @param int $memberid
   * @param int $date
   * @return double
   */
  public function GetHuFuaProfit($memberid, $date);
  /**
   * @param int $memberid
   * @param int $date
   * @return double
   */
  public function GetQuYueProfit($memberid, $date);
  /**
   * @param int $memberid
   * @param int $date
   * @return \FuHuaService\Model\DetailsProfit[]
   */
  public function GetChildProfit($memberid, $date);
  /**
   * @param int $memberid
   * @return double
   */
  public function GetChildLockMoney($memberid);
}


class IFuHuaServiceClient implements \FuHuaService\Service\IFuHuaServiceIf {
  protected $input_ = null;
  protected $output_ = null;

  protected $seqid_ = 0;

  public function __construct($input, $output=null) {
    $this->input_ = $input;
    $this->output_ = $output ? $output : $input;
  }

  public function GetConfig()
  {
    $this->send_GetConfig();
    return $this->recv_GetConfig();
  }

  public function send_GetConfig()
  {
    $args = new \FuHuaService\Service\IFuHuaService_GetConfig_args();
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'GetConfig', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('GetConfig', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_GetConfig()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\FuHuaService\Service\IFuHuaService_GetConfig_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \FuHuaService\Service\IFuHuaService_GetConfig_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("GetConfig failed: unknown result");
  }

  public function SetConfig($model)
  {
    $this->send_SetConfig($model);
    return $this->recv_SetConfig();
  }

  public function send_SetConfig($model)
  {
    $args = new \FuHuaService\Service\IFuHuaService_SetConfig_args();
    $args->model = $model;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'SetConfig', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('SetConfig', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_SetConfig()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\FuHuaService\Service\IFuHuaService_SetConfig_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \FuHuaService\Service\IFuHuaService_SetConfig_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("SetConfig failed: unknown result");
  }

  public function GetFiancingMember($memberid)
  {
    $this->send_GetFiancingMember($memberid);
    return $this->recv_GetFiancingMember();
  }

  public function send_GetFiancingMember($memberid)
  {
    $args = new \FuHuaService\Service\IFuHuaService_GetFiancingMember_args();
    $args->memberid = $memberid;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'GetFiancingMember', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('GetFiancingMember', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_GetFiancingMember()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\FuHuaService\Service\IFuHuaService_GetFiancingMember_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \FuHuaService\Service\IFuHuaService_GetFiancingMember_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("GetFiancingMember failed: unknown result");
  }

  public function GetProducts()
  {
    $this->send_GetProducts();
    return $this->recv_GetProducts();
  }

  public function send_GetProducts()
  {
    $args = new \FuHuaService\Service\IFuHuaService_GetProducts_args();
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'GetProducts', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('GetProducts', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_GetProducts()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\FuHuaService\Service\IFuHuaService_GetProducts_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \FuHuaService\Service\IFuHuaService_GetProducts_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("GetProducts failed: unknown result");
  }

  public function GetProduct($id)
  {
    $this->send_GetProduct($id);
    return $this->recv_GetProduct();
  }

  public function send_GetProduct($id)
  {
    $args = new \FuHuaService\Service\IFuHuaService_GetProduct_args();
    $args->id = $id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'GetProduct', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('GetProduct', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_GetProduct()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\FuHuaService\Service\IFuHuaService_GetProduct_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \FuHuaService\Service\IFuHuaService_GetProduct_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("GetProduct failed: unknown result");
  }

  public function GetFiancingProfitList($PageIndex, $PageSize, $where, $order)
  {
    $this->send_GetFiancingProfitList($PageIndex, $PageSize, $where, $order);
    return $this->recv_GetFiancingProfitList();
  }

  public function send_GetFiancingProfitList($PageIndex, $PageSize, $where, $order)
  {
    $args = new \FuHuaService\Service\IFuHuaService_GetFiancingProfitList_args();
    $args->PageIndex = $PageIndex;
    $args->PageSize = $PageSize;
    $args->where = $where;
    $args->order = $order;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'GetFiancingProfitList', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('GetFiancingProfitList', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_GetFiancingProfitList()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\FuHuaService\Service\IFuHuaService_GetFiancingProfitList_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \FuHuaService\Service\IFuHuaService_GetFiancingProfitList_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("GetFiancingProfitList failed: unknown result");
  }

  public function GetFinancingDetailsList($PageIndex, $PageSize, $where, $order)
  {
    $this->send_GetFinancingDetailsList($PageIndex, $PageSize, $where, $order);
    return $this->recv_GetFinancingDetailsList();
  }

  public function send_GetFinancingDetailsList($PageIndex, $PageSize, $where, $order)
  {
    $args = new \FuHuaService\Service\IFuHuaService_GetFinancingDetailsList_args();
    $args->PageIndex = $PageIndex;
    $args->PageSize = $PageSize;
    $args->where = $where;
    $args->order = $order;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'GetFinancingDetailsList', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('GetFinancingDetailsList', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_GetFinancingDetailsList()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\FuHuaService\Service\IFuHuaService_GetFinancingDetailsList_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \FuHuaService\Service\IFuHuaService_GetFinancingDetailsList_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("GetFinancingDetailsList failed: unknown result");
  }

  public function MemberLockMoney($paymold, $memberid, $num, $productid)
  {
    $this->send_MemberLockMoney($paymold, $memberid, $num, $productid);
    return $this->recv_MemberLockMoney();
  }

  public function send_MemberLockMoney($paymold, $memberid, $num, $productid)
  {
    $args = new \FuHuaService\Service\IFuHuaService_MemberLockMoney_args();
    $args->paymold = $paymold;
    $args->memberid = $memberid;
    $args->num = $num;
    $args->productid = $productid;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'MemberLockMoney', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('MemberLockMoney', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_MemberLockMoney()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\FuHuaService\Service\IFuHuaService_MemberLockMoney_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \FuHuaService\Service\IFuHuaService_MemberLockMoney_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("MemberLockMoney failed: unknown result");
  }

  public function WithdrawByFuHua($memberid, $money)
  {
    $this->send_WithdrawByFuHua($memberid, $money);
    return $this->recv_WithdrawByFuHua();
  }

  public function send_WithdrawByFuHua($memberid, $money)
  {
    $args = new \FuHuaService\Service\IFuHuaService_WithdrawByFuHua_args();
    $args->memberid = $memberid;
    $args->money = $money;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'WithdrawByFuHua', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('WithdrawByFuHua', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_WithdrawByFuHua()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\FuHuaService\Service\IFuHuaService_WithdrawByFuHua_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \FuHuaService\Service\IFuHuaService_WithdrawByFuHua_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("WithdrawByFuHua failed: unknown result");
  }

  public function WithdrawByQuYu($memberid, $money)
  {
    $this->send_WithdrawByQuYu($memberid, $money);
    return $this->recv_WithdrawByQuYu();
  }

  public function send_WithdrawByQuYu($memberid, $money)
  {
    $args = new \FuHuaService\Service\IFuHuaService_WithdrawByQuYu_args();
    $args->memberid = $memberid;
    $args->money = $money;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'WithdrawByQuYu', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('WithdrawByQuYu', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_WithdrawByQuYu()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\FuHuaService\Service\IFuHuaService_WithdrawByQuYu_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \FuHuaService\Service\IFuHuaService_WithdrawByQuYu_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("WithdrawByQuYu failed: unknown result");
  }

  public function GetMemberCashList($PageIndex, $PageSize, $where, $order, $memberid)
  {
    $this->send_GetMemberCashList($PageIndex, $PageSize, $where, $order, $memberid);
    return $this->recv_GetMemberCashList();
  }

  public function send_GetMemberCashList($PageIndex, $PageSize, $where, $order, $memberid)
  {
    $args = new \FuHuaService\Service\IFuHuaService_GetMemberCashList_args();
    $args->PageIndex = $PageIndex;
    $args->PageSize = $PageSize;
    $args->where = $where;
    $args->order = $order;
    $args->memberid = $memberid;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'GetMemberCashList', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('GetMemberCashList', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_GetMemberCashList()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\FuHuaService\Service\IFuHuaService_GetMemberCashList_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \FuHuaService\Service\IFuHuaService_GetMemberCashList_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("GetMemberCashList failed: unknown result");
  }

  public function GetFiancingMemberList($PageIndex, $PageSize, $where, $order)
  {
    $this->send_GetFiancingMemberList($PageIndex, $PageSize, $where, $order);
    return $this->recv_GetFiancingMemberList();
  }

  public function send_GetFiancingMemberList($PageIndex, $PageSize, $where, $order)
  {
    $args = new \FuHuaService\Service\IFuHuaService_GetFiancingMemberList_args();
    $args->PageIndex = $PageIndex;
    $args->PageSize = $PageSize;
    $args->where = $where;
    $args->order = $order;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'GetFiancingMemberList', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('GetFiancingMemberList', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_GetFiancingMemberList()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\FuHuaService\Service\IFuHuaService_GetFiancingMemberList_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \FuHuaService\Service\IFuHuaService_GetFiancingMemberList_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("GetFiancingMemberList failed: unknown result");
  }

  public function GetNoProcess($memberid)
  {
    $this->send_GetNoProcess($memberid);
    return $this->recv_GetNoProcess();
  }

  public function send_GetNoProcess($memberid)
  {
    $args = new \FuHuaService\Service\IFuHuaService_GetNoProcess_args();
    $args->memberid = $memberid;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'GetNoProcess', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('GetNoProcess', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_GetNoProcess()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\FuHuaService\Service\IFuHuaService_GetNoProcess_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \FuHuaService\Service\IFuHuaService_GetNoProcess_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("GetNoProcess failed: unknown result");
  }

  public function GetDetailsProfit($memberid)
  {
    $this->send_GetDetailsProfit($memberid);
    return $this->recv_GetDetailsProfit();
  }

  public function send_GetDetailsProfit($memberid)
  {
    $args = new \FuHuaService\Service\IFuHuaService_GetDetailsProfit_args();
    $args->memberid = $memberid;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'GetDetailsProfit', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('GetDetailsProfit', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_GetDetailsProfit()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\FuHuaService\Service\IFuHuaService_GetDetailsProfit_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \FuHuaService\Service\IFuHuaService_GetDetailsProfit_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("GetDetailsProfit failed: unknown result");
  }

  public function GetHuFuaProfit($memberid, $date)
  {
    $this->send_GetHuFuaProfit($memberid, $date);
    return $this->recv_GetHuFuaProfit();
  }

  public function send_GetHuFuaProfit($memberid, $date)
  {
    $args = new \FuHuaService\Service\IFuHuaService_GetHuFuaProfit_args();
    $args->memberid = $memberid;
    $args->date = $date;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'GetHuFuaProfit', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('GetHuFuaProfit', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_GetHuFuaProfit()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\FuHuaService\Service\IFuHuaService_GetHuFuaProfit_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \FuHuaService\Service\IFuHuaService_GetHuFuaProfit_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("GetHuFuaProfit failed: unknown result");
  }

  public function GetQuYueProfit($memberid, $date)
  {
    $this->send_GetQuYueProfit($memberid, $date);
    return $this->recv_GetQuYueProfit();
  }

  public function send_GetQuYueProfit($memberid, $date)
  {
    $args = new \FuHuaService\Service\IFuHuaService_GetQuYueProfit_args();
    $args->memberid = $memberid;
    $args->date = $date;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'GetQuYueProfit', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('GetQuYueProfit', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_GetQuYueProfit()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\FuHuaService\Service\IFuHuaService_GetQuYueProfit_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \FuHuaService\Service\IFuHuaService_GetQuYueProfit_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("GetQuYueProfit failed: unknown result");
  }

  public function GetChildProfit($memberid, $date)
  {
    $this->send_GetChildProfit($memberid, $date);
    return $this->recv_GetChildProfit();
  }

  public function send_GetChildProfit($memberid, $date)
  {
    $args = new \FuHuaService\Service\IFuHuaService_GetChildProfit_args();
    $args->memberid = $memberid;
    $args->date = $date;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'GetChildProfit', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('GetChildProfit', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_GetChildProfit()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\FuHuaService\Service\IFuHuaService_GetChildProfit_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \FuHuaService\Service\IFuHuaService_GetChildProfit_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("GetChildProfit failed: unknown result");
  }

  public function GetChildLockMoney($memberid)
  {
    $this->send_GetChildLockMoney($memberid);
    return $this->recv_GetChildLockMoney();
  }

  public function send_GetChildLockMoney($memberid)
  {
    $args = new \FuHuaService\Service\IFuHuaService_GetChildLockMoney_args();
    $args->memberid = $memberid;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'GetChildLockMoney', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('GetChildLockMoney', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_GetChildLockMoney()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\FuHuaService\Service\IFuHuaService_GetChildLockMoney_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \FuHuaService\Service\IFuHuaService_GetChildLockMoney_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("GetChildLockMoney failed: unknown result");
  }

}


// HELPER FUNCTIONS AND STRUCTURES

class IFuHuaService_GetConfig_args {
  static $isValidate = false;

  static $_TSPEC = array(
    );


  public function __construct() {
  }

  public function getName() {
    return 'IFuHuaService_GetConfig_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('IFuHuaService_GetConfig_args');
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class IFuHuaService_GetConfig_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\FuHuaService\Model\FiancingLog',
      ),
    );

  /**
   * @var \FuHuaService\Model\FiancingLog
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'IFuHuaService_GetConfig_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \FuHuaService\Model\FiancingLog();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('IFuHuaService_GetConfig_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class IFuHuaService_SetConfig_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'model',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\FuHuaService\Model\FiancingLog',
      ),
    );

  /**
   * @var \FuHuaService\Model\FiancingLog
   */
  public $model = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['model'])) {
        $this->model = $vals['model'];
      }
    }
  }

  public function getName() {
    return 'IFuHuaService_SetConfig_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->model = new \FuHuaService\Model\FiancingLog();
            $xfer += $this->model->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('IFuHuaService_SetConfig_args');
    if ($this->model !== null) {
      if (!is_object($this->model)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('model', TType::STRUCT, 1);
      $xfer += $this->model->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class IFuHuaService_SetConfig_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    );

  /**
   * @var bool
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'IFuHuaService_SetConfig_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('IFuHuaService_SetConfig_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class IFuHuaService_GetFiancingMember_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'memberid',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    );

  /**
   * @var int
   */
  public $memberid = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['memberid'])) {
        $this->memberid = $vals['memberid'];
      }
    }
  }

  public function getName() {
    return 'IFuHuaService_GetFiancingMember_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->memberid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('IFuHuaService_GetFiancingMember_args');
    if ($this->memberid !== null) {
      $xfer += $output->writeFieldBegin('memberid', TType::I32, 1);
      $xfer += $output->writeI32($this->memberid);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class IFuHuaService_GetFiancingMember_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\FuHuaService\Model\FiancingMember',
      ),
    );

  /**
   * @var \FuHuaService\Model\FiancingMember
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'IFuHuaService_GetFiancingMember_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \FuHuaService\Model\FiancingMember();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('IFuHuaService_GetFiancingMember_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class IFuHuaService_GetProducts_args {
  static $isValidate = false;

  static $_TSPEC = array(
    );


  public function __construct() {
  }

  public function getName() {
    return 'IFuHuaService_GetProducts_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('IFuHuaService_GetProducts_args');
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class IFuHuaService_GetProducts_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\FuHuaService\Model\FinancingProduct',
        ),
      ),
    );

  /**
   * @var \FuHuaService\Model\FinancingProduct[]
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'IFuHuaService_GetProducts_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $elem5 = new \FuHuaService\Model\FinancingProduct();
              $xfer += $elem5->read($input);
              $this->success []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('IFuHuaService_GetProducts_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter6)
          {
            $xfer += $iter6->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class IFuHuaService_GetProduct_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'id',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    );

  /**
   * @var int
   */
  public $id = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
    }
  }

  public function getName() {
    return 'IFuHuaService_GetProduct_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('IFuHuaService_GetProduct_args');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I32, 1);
      $xfer += $output->writeI32($this->id);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class IFuHuaService_GetProduct_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\FuHuaService\Model\FinancingProduct',
      ),
    );

  /**
   * @var \FuHuaService\Model\FinancingProduct
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'IFuHuaService_GetProduct_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \FuHuaService\Model\FinancingProduct();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('IFuHuaService_GetProduct_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class IFuHuaService_GetFiancingProfitList_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'PageIndex',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'PageSize',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    3 => array(
      'var' => 'where',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'order',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var int
   */
  public $PageIndex = null;
  /**
   * @var int
   */
  public $PageSize = null;
  /**
   * @var string
   */
  public $where = null;
  /**
   * @var string
   */
  public $order = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['PageIndex'])) {
        $this->PageIndex = $vals['PageIndex'];
      }
      if (isset($vals['PageSize'])) {
        $this->PageSize = $vals['PageSize'];
      }
      if (isset($vals['where'])) {
        $this->where = $vals['where'];
      }
      if (isset($vals['order'])) {
        $this->order = $vals['order'];
      }
    }
  }

  public function getName() {
    return 'IFuHuaService_GetFiancingProfitList_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->PageIndex);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->PageSize);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->where);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->order);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('IFuHuaService_GetFiancingProfitList_args');
    if ($this->PageIndex !== null) {
      $xfer += $output->writeFieldBegin('PageIndex', TType::I32, 1);
      $xfer += $output->writeI32($this->PageIndex);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->PageSize !== null) {
      $xfer += $output->writeFieldBegin('PageSize', TType::I32, 2);
      $xfer += $output->writeI32($this->PageSize);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->where !== null) {
      $xfer += $output->writeFieldBegin('where', TType::STRING, 3);
      $xfer += $output->writeString($this->where);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->order !== null) {
      $xfer += $output->writeFieldBegin('order', TType::STRING, 4);
      $xfer += $output->writeString($this->order);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class IFuHuaService_GetFiancingProfitList_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\FuHuaService\Model\FiancingProfitList',
      ),
    );

  /**
   * @var \FuHuaService\Model\FiancingProfitList
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'IFuHuaService_GetFiancingProfitList_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \FuHuaService\Model\FiancingProfitList();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('IFuHuaService_GetFiancingProfitList_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class IFuHuaService_GetFinancingDetailsList_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'PageIndex',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'PageSize',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    3 => array(
      'var' => 'where',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'order',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var int
   */
  public $PageIndex = null;
  /**
   * @var int
   */
  public $PageSize = null;
  /**
   * @var string
   */
  public $where = null;
  /**
   * @var string
   */
  public $order = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['PageIndex'])) {
        $this->PageIndex = $vals['PageIndex'];
      }
      if (isset($vals['PageSize'])) {
        $this->PageSize = $vals['PageSize'];
      }
      if (isset($vals['where'])) {
        $this->where = $vals['where'];
      }
      if (isset($vals['order'])) {
        $this->order = $vals['order'];
      }
    }
  }

  public function getName() {
    return 'IFuHuaService_GetFinancingDetailsList_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->PageIndex);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->PageSize);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->where);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->order);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('IFuHuaService_GetFinancingDetailsList_args');
    if ($this->PageIndex !== null) {
      $xfer += $output->writeFieldBegin('PageIndex', TType::I32, 1);
      $xfer += $output->writeI32($this->PageIndex);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->PageSize !== null) {
      $xfer += $output->writeFieldBegin('PageSize', TType::I32, 2);
      $xfer += $output->writeI32($this->PageSize);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->where !== null) {
      $xfer += $output->writeFieldBegin('where', TType::STRING, 3);
      $xfer += $output->writeString($this->where);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->order !== null) {
      $xfer += $output->writeFieldBegin('order', TType::STRING, 4);
      $xfer += $output->writeString($this->order);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class IFuHuaService_GetFinancingDetailsList_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\FuHuaService\Model\FinancingDetailsList',
      ),
    );

  /**
   * @var \FuHuaService\Model\FinancingDetailsList
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'IFuHuaService_GetFinancingDetailsList_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \FuHuaService\Model\FinancingDetailsList();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('IFuHuaService_GetFinancingDetailsList_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class IFuHuaService_MemberLockMoney_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'paymold',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'memberid',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    3 => array(
      'var' => 'num',
      'isRequired' => false,
      'type' => TType::DOUBLE,
      ),
    4 => array(
      'var' => 'productid',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    );

  /**
   * @var int
   */
  public $paymold = null;
  /**
   * @var int
   */
  public $memberid = null;
  /**
   * @var double
   */
  public $num = null;
  /**
   * @var int
   */
  public $productid = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['paymold'])) {
        $this->paymold = $vals['paymold'];
      }
      if (isset($vals['memberid'])) {
        $this->memberid = $vals['memberid'];
      }
      if (isset($vals['num'])) {
        $this->num = $vals['num'];
      }
      if (isset($vals['productid'])) {
        $this->productid = $vals['productid'];
      }
    }
  }

  public function getName() {
    return 'IFuHuaService_MemberLockMoney_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->paymold);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->memberid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->num);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->productid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('IFuHuaService_MemberLockMoney_args');
    if ($this->paymold !== null) {
      $xfer += $output->writeFieldBegin('paymold', TType::I32, 1);
      $xfer += $output->writeI32($this->paymold);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->memberid !== null) {
      $xfer += $output->writeFieldBegin('memberid', TType::I32, 2);
      $xfer += $output->writeI32($this->memberid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->num !== null) {
      $xfer += $output->writeFieldBegin('num', TType::DOUBLE, 3);
      $xfer += $output->writeDouble($this->num);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->productid !== null) {
      $xfer += $output->writeFieldBegin('productid', TType::I32, 4);
      $xfer += $output->writeI32($this->productid);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class IFuHuaService_MemberLockMoney_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    );

  /**
   * @var int
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'IFuHuaService_MemberLockMoney_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('IFuHuaService_MemberLockMoney_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class IFuHuaService_WithdrawByFuHua_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'memberid',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'money',
      'isRequired' => false,
      'type' => TType::DOUBLE,
      ),
    );

  /**
   * @var int
   */
  public $memberid = null;
  /**
   * @var double
   */
  public $money = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['memberid'])) {
        $this->memberid = $vals['memberid'];
      }
      if (isset($vals['money'])) {
        $this->money = $vals['money'];
      }
    }
  }

  public function getName() {
    return 'IFuHuaService_WithdrawByFuHua_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->memberid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->money);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('IFuHuaService_WithdrawByFuHua_args');
    if ($this->memberid !== null) {
      $xfer += $output->writeFieldBegin('memberid', TType::I32, 1);
      $xfer += $output->writeI32($this->memberid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->money !== null) {
      $xfer += $output->writeFieldBegin('money', TType::DOUBLE, 2);
      $xfer += $output->writeDouble($this->money);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class IFuHuaService_WithdrawByFuHua_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    );

  /**
   * @var int
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'IFuHuaService_WithdrawByFuHua_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('IFuHuaService_WithdrawByFuHua_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class IFuHuaService_WithdrawByQuYu_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'memberid',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'money',
      'isRequired' => false,
      'type' => TType::DOUBLE,
      ),
    );

  /**
   * @var int
   */
  public $memberid = null;
  /**
   * @var double
   */
  public $money = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['memberid'])) {
        $this->memberid = $vals['memberid'];
      }
      if (isset($vals['money'])) {
        $this->money = $vals['money'];
      }
    }
  }

  public function getName() {
    return 'IFuHuaService_WithdrawByQuYu_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->memberid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->money);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('IFuHuaService_WithdrawByQuYu_args');
    if ($this->memberid !== null) {
      $xfer += $output->writeFieldBegin('memberid', TType::I32, 1);
      $xfer += $output->writeI32($this->memberid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->money !== null) {
      $xfer += $output->writeFieldBegin('money', TType::DOUBLE, 2);
      $xfer += $output->writeDouble($this->money);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class IFuHuaService_WithdrawByQuYu_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    );

  /**
   * @var int
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'IFuHuaService_WithdrawByQuYu_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('IFuHuaService_WithdrawByQuYu_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class IFuHuaService_GetMemberCashList_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'PageIndex',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'PageSize',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    3 => array(
      'var' => 'where',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'order',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'memberid',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    );

  /**
   * @var int
   */
  public $PageIndex = null;
  /**
   * @var int
   */
  public $PageSize = null;
  /**
   * @var string
   */
  public $where = null;
  /**
   * @var string
   */
  public $order = null;
  /**
   * @var int
   */
  public $memberid = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['PageIndex'])) {
        $this->PageIndex = $vals['PageIndex'];
      }
      if (isset($vals['PageSize'])) {
        $this->PageSize = $vals['PageSize'];
      }
      if (isset($vals['where'])) {
        $this->where = $vals['where'];
      }
      if (isset($vals['order'])) {
        $this->order = $vals['order'];
      }
      if (isset($vals['memberid'])) {
        $this->memberid = $vals['memberid'];
      }
    }
  }

  public function getName() {
    return 'IFuHuaService_GetMemberCashList_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->PageIndex);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->PageSize);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->where);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->order);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->memberid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('IFuHuaService_GetMemberCashList_args');
    if ($this->PageIndex !== null) {
      $xfer += $output->writeFieldBegin('PageIndex', TType::I32, 1);
      $xfer += $output->writeI32($this->PageIndex);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->PageSize !== null) {
      $xfer += $output->writeFieldBegin('PageSize', TType::I32, 2);
      $xfer += $output->writeI32($this->PageSize);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->where !== null) {
      $xfer += $output->writeFieldBegin('where', TType::STRING, 3);
      $xfer += $output->writeString($this->where);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->order !== null) {
      $xfer += $output->writeFieldBegin('order', TType::STRING, 4);
      $xfer += $output->writeString($this->order);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->memberid !== null) {
      $xfer += $output->writeFieldBegin('memberid', TType::I32, 5);
      $xfer += $output->writeI32($this->memberid);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class IFuHuaService_GetMemberCashList_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\FuHuaService\Model\MemberCashLists',
      ),
    );

  /**
   * @var \FuHuaService\Model\MemberCashLists
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'IFuHuaService_GetMemberCashList_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \FuHuaService\Model\MemberCashLists();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('IFuHuaService_GetMemberCashList_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class IFuHuaService_GetFiancingMemberList_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'PageIndex',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'PageSize',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    3 => array(
      'var' => 'where',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'order',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var int
   */
  public $PageIndex = null;
  /**
   * @var int
   */
  public $PageSize = null;
  /**
   * @var string
   */
  public $where = null;
  /**
   * @var string
   */
  public $order = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['PageIndex'])) {
        $this->PageIndex = $vals['PageIndex'];
      }
      if (isset($vals['PageSize'])) {
        $this->PageSize = $vals['PageSize'];
      }
      if (isset($vals['where'])) {
        $this->where = $vals['where'];
      }
      if (isset($vals['order'])) {
        $this->order = $vals['order'];
      }
    }
  }

  public function getName() {
    return 'IFuHuaService_GetFiancingMemberList_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->PageIndex);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->PageSize);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->where);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->order);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('IFuHuaService_GetFiancingMemberList_args');
    if ($this->PageIndex !== null) {
      $xfer += $output->writeFieldBegin('PageIndex', TType::I32, 1);
      $xfer += $output->writeI32($this->PageIndex);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->PageSize !== null) {
      $xfer += $output->writeFieldBegin('PageSize', TType::I32, 2);
      $xfer += $output->writeI32($this->PageSize);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->where !== null) {
      $xfer += $output->writeFieldBegin('where', TType::STRING, 3);
      $xfer += $output->writeString($this->where);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->order !== null) {
      $xfer += $output->writeFieldBegin('order', TType::STRING, 4);
      $xfer += $output->writeString($this->order);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class IFuHuaService_GetFiancingMemberList_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\FuHuaService\Model\FiancingMemberListResult',
      ),
    );

  /**
   * @var \FuHuaService\Model\FiancingMemberListResult
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'IFuHuaService_GetFiancingMemberList_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \FuHuaService\Model\FiancingMemberListResult();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('IFuHuaService_GetFiancingMemberList_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class IFuHuaService_GetNoProcess_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'memberid',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    );

  /**
   * @var int
   */
  public $memberid = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['memberid'])) {
        $this->memberid = $vals['memberid'];
      }
    }
  }

  public function getName() {
    return 'IFuHuaService_GetNoProcess_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->memberid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('IFuHuaService_GetNoProcess_args');
    if ($this->memberid !== null) {
      $xfer += $output->writeFieldBegin('memberid', TType::I32, 1);
      $xfer += $output->writeI32($this->memberid);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class IFuHuaService_GetNoProcess_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\FuHuaService\Model\NoProcess',
        ),
      ),
    );

  /**
   * @var \FuHuaService\Model\NoProcess[]
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'IFuHuaService_GetNoProcess_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size7 = 0;
            $_etype10 = 0;
            $xfer += $input->readListBegin($_etype10, $_size7);
            for ($_i11 = 0; $_i11 < $_size7; ++$_i11)
            {
              $elem12 = null;
              $elem12 = new \FuHuaService\Model\NoProcess();
              $xfer += $elem12->read($input);
              $this->success []= $elem12;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('IFuHuaService_GetNoProcess_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter13)
          {
            $xfer += $iter13->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class IFuHuaService_GetDetailsProfit_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'memberid',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    );

  /**
   * @var int
   */
  public $memberid = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['memberid'])) {
        $this->memberid = $vals['memberid'];
      }
    }
  }

  public function getName() {
    return 'IFuHuaService_GetDetailsProfit_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->memberid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('IFuHuaService_GetDetailsProfit_args');
    if ($this->memberid !== null) {
      $xfer += $output->writeFieldBegin('memberid', TType::I32, 1);
      $xfer += $output->writeI32($this->memberid);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class IFuHuaService_GetDetailsProfit_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\FuHuaService\Model\DetailsProfit',
        ),
      ),
    );

  /**
   * @var \FuHuaService\Model\DetailsProfit[]
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'IFuHuaService_GetDetailsProfit_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size14 = 0;
            $_etype17 = 0;
            $xfer += $input->readListBegin($_etype17, $_size14);
            for ($_i18 = 0; $_i18 < $_size14; ++$_i18)
            {
              $elem19 = null;
              $elem19 = new \FuHuaService\Model\DetailsProfit();
              $xfer += $elem19->read($input);
              $this->success []= $elem19;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('IFuHuaService_GetDetailsProfit_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter20)
          {
            $xfer += $iter20->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class IFuHuaService_GetHuFuaProfit_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'memberid',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'date',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    );

  /**
   * @var int
   */
  public $memberid = null;
  /**
   * @var int
   */
  public $date = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['memberid'])) {
        $this->memberid = $vals['memberid'];
      }
      if (isset($vals['date'])) {
        $this->date = $vals['date'];
      }
    }
  }

  public function getName() {
    return 'IFuHuaService_GetHuFuaProfit_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->memberid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->date);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('IFuHuaService_GetHuFuaProfit_args');
    if ($this->memberid !== null) {
      $xfer += $output->writeFieldBegin('memberid', TType::I32, 1);
      $xfer += $output->writeI32($this->memberid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->date !== null) {
      $xfer += $output->writeFieldBegin('date', TType::I32, 2);
      $xfer += $output->writeI32($this->date);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class IFuHuaService_GetHuFuaProfit_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::DOUBLE,
      ),
    );

  /**
   * @var double
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'IFuHuaService_GetHuFuaProfit_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('IFuHuaService_GetHuFuaProfit_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::DOUBLE, 0);
      $xfer += $output->writeDouble($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class IFuHuaService_GetQuYueProfit_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'memberid',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'date',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    );

  /**
   * @var int
   */
  public $memberid = null;
  /**
   * @var int
   */
  public $date = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['memberid'])) {
        $this->memberid = $vals['memberid'];
      }
      if (isset($vals['date'])) {
        $this->date = $vals['date'];
      }
    }
  }

  public function getName() {
    return 'IFuHuaService_GetQuYueProfit_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->memberid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->date);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('IFuHuaService_GetQuYueProfit_args');
    if ($this->memberid !== null) {
      $xfer += $output->writeFieldBegin('memberid', TType::I32, 1);
      $xfer += $output->writeI32($this->memberid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->date !== null) {
      $xfer += $output->writeFieldBegin('date', TType::I32, 2);
      $xfer += $output->writeI32($this->date);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class IFuHuaService_GetQuYueProfit_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::DOUBLE,
      ),
    );

  /**
   * @var double
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'IFuHuaService_GetQuYueProfit_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('IFuHuaService_GetQuYueProfit_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::DOUBLE, 0);
      $xfer += $output->writeDouble($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class IFuHuaService_GetChildProfit_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'memberid',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'date',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    );

  /**
   * @var int
   */
  public $memberid = null;
  /**
   * @var int
   */
  public $date = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['memberid'])) {
        $this->memberid = $vals['memberid'];
      }
      if (isset($vals['date'])) {
        $this->date = $vals['date'];
      }
    }
  }

  public function getName() {
    return 'IFuHuaService_GetChildProfit_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->memberid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->date);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('IFuHuaService_GetChildProfit_args');
    if ($this->memberid !== null) {
      $xfer += $output->writeFieldBegin('memberid', TType::I32, 1);
      $xfer += $output->writeI32($this->memberid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->date !== null) {
      $xfer += $output->writeFieldBegin('date', TType::I32, 2);
      $xfer += $output->writeI32($this->date);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class IFuHuaService_GetChildProfit_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\FuHuaService\Model\DetailsProfit',
        ),
      ),
    );

  /**
   * @var \FuHuaService\Model\DetailsProfit[]
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'IFuHuaService_GetChildProfit_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size21 = 0;
            $_etype24 = 0;
            $xfer += $input->readListBegin($_etype24, $_size21);
            for ($_i25 = 0; $_i25 < $_size21; ++$_i25)
            {
              $elem26 = null;
              $elem26 = new \FuHuaService\Model\DetailsProfit();
              $xfer += $elem26->read($input);
              $this->success []= $elem26;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('IFuHuaService_GetChildProfit_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter27)
          {
            $xfer += $iter27->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class IFuHuaService_GetChildLockMoney_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'memberid',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    );

  /**
   * @var int
   */
  public $memberid = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['memberid'])) {
        $this->memberid = $vals['memberid'];
      }
    }
  }

  public function getName() {
    return 'IFuHuaService_GetChildLockMoney_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->memberid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('IFuHuaService_GetChildLockMoney_args');
    if ($this->memberid !== null) {
      $xfer += $output->writeFieldBegin('memberid', TType::I32, 1);
      $xfer += $output->writeI32($this->memberid);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class IFuHuaService_GetChildLockMoney_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::DOUBLE,
      ),
    );

  /**
   * @var double
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'IFuHuaService_GetChildLockMoney_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('IFuHuaService_GetChildLockMoney_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::DOUBLE, 0);
      $xfer += $output->writeDouble($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}



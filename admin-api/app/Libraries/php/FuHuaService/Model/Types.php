<?php
namespace FuHuaService\Model;

/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


final class LockPayMold {
  const Balance = 0;
  const FuHuaBalance = 1;
  const QuYuBalance = 2;
  static public $__names = array(
    0 => 'Balance',
    1 => 'FuHuaBalance',
    2 => 'QuYuBalance',
  );
}

final class LockReuslt {
  const Err = 0;
  const Success = 1;
  const NotEnougth = 2;
  const MinMoney = 3;
  const ProductErr = 4;
  static public $__names = array(
    0 => 'Err',
    1 => 'Success',
    2 => 'NotEnougth',
    3 => 'MinMoney',
    4 => 'ProductErr',
  );
}

final class WithdrawResult {
  const Err = 0;
  const Success = 1;
  const NotEnougth = 2;
  const ExceedMax = 3;
  static public $__names = array(
    0 => 'Err',
    1 => 'Success',
    2 => 'NotEnougth',
    3 => 'ExceedMax',
  );
}

class FiancingLog {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'Id',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'JiedianLock',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    3 => array(
      'var' => 'JiedianYeJi',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    4 => array(
      'var' => 'JiedianMember',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    5 => array(
      'var' => 'JiedianPerfect',
      'isRequired' => false,
      'type' => TType::DOUBLE,
      ),
    6 => array(
      'var' => 'DaJiedianLock',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    7 => array(
      'var' => 'DaJiedian',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    8 => array(
      'var' => 'DaJiedianMember',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    9 => array(
      'var' => 'DaJiedianPerfect',
      'isRequired' => false,
      'type' => TType::DOUBLE,
      ),
    10 => array(
      'var' => 'ChaoJiedianLock',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    11 => array(
      'var' => 'ChaoJiedianMember',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    12 => array(
      'var' => 'ChaoJiedianPerfect',
      'isRequired' => false,
      'type' => TType::DOUBLE,
      ),
    13 => array(
      'var' => 'ChaoJiedianDa',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    14 => array(
      'var' => 'CoinId',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    15 => array(
      'var' => 'ZhiTuiPerfect',
      'isRequired' => false,
      'type' => TType::DOUBLE,
      ),
    16 => array(
      'var' => 'WithdrawLimit',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    );

  /**
   * @var int
   */
  public $Id = null;
  /**
   * @var int
   */
  public $JiedianLock = null;
  /**
   * @var int
   */
  public $JiedianYeJi = null;
  /**
   * @var int
   */
  public $JiedianMember = null;
  /**
   * @var double
   */
  public $JiedianPerfect = null;
  /**
   * @var int
   */
  public $DaJiedianLock = null;
  /**
   * @var int
   */
  public $DaJiedian = null;
  /**
   * @var int
   */
  public $DaJiedianMember = null;
  /**
   * @var double
   */
  public $DaJiedianPerfect = null;
  /**
   * @var int
   */
  public $ChaoJiedianLock = null;
  /**
   * @var int
   */
  public $ChaoJiedianMember = null;
  /**
   * @var double
   */
  public $ChaoJiedianPerfect = null;
  /**
   * @var int
   */
  public $ChaoJiedianDa = null;
  /**
   * @var int
   */
  public $CoinId = null;
  /**
   * @var double
   */
  public $ZhiTuiPerfect = null;
  /**
   * @var bool
   */
  public $WithdrawLimit = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['Id'])) {
        $this->Id = $vals['Id'];
      }
      if (isset($vals['JiedianLock'])) {
        $this->JiedianLock = $vals['JiedianLock'];
      }
      if (isset($vals['JiedianYeJi'])) {
        $this->JiedianYeJi = $vals['JiedianYeJi'];
      }
      if (isset($vals['JiedianMember'])) {
        $this->JiedianMember = $vals['JiedianMember'];
      }
      if (isset($vals['JiedianPerfect'])) {
        $this->JiedianPerfect = $vals['JiedianPerfect'];
      }
      if (isset($vals['DaJiedianLock'])) {
        $this->DaJiedianLock = $vals['DaJiedianLock'];
      }
      if (isset($vals['DaJiedian'])) {
        $this->DaJiedian = $vals['DaJiedian'];
      }
      if (isset($vals['DaJiedianMember'])) {
        $this->DaJiedianMember = $vals['DaJiedianMember'];
      }
      if (isset($vals['DaJiedianPerfect'])) {
        $this->DaJiedianPerfect = $vals['DaJiedianPerfect'];
      }
      if (isset($vals['ChaoJiedianLock'])) {
        $this->ChaoJiedianLock = $vals['ChaoJiedianLock'];
      }
      if (isset($vals['ChaoJiedianMember'])) {
        $this->ChaoJiedianMember = $vals['ChaoJiedianMember'];
      }
      if (isset($vals['ChaoJiedianPerfect'])) {
        $this->ChaoJiedianPerfect = $vals['ChaoJiedianPerfect'];
      }
      if (isset($vals['ChaoJiedianDa'])) {
        $this->ChaoJiedianDa = $vals['ChaoJiedianDa'];
      }
      if (isset($vals['CoinId'])) {
        $this->CoinId = $vals['CoinId'];
      }
      if (isset($vals['ZhiTuiPerfect'])) {
        $this->ZhiTuiPerfect = $vals['ZhiTuiPerfect'];
      }
      if (isset($vals['WithdrawLimit'])) {
        $this->WithdrawLimit = $vals['WithdrawLimit'];
      }
    }
  }

  public function getName() {
    return 'FiancingLog';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->Id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->JiedianLock);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->JiedianYeJi);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->JiedianMember);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->JiedianPerfect);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->DaJiedianLock);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->DaJiedian);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->DaJiedianMember);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->DaJiedianPerfect);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ChaoJiedianLock);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ChaoJiedianMember);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->ChaoJiedianPerfect);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ChaoJiedianDa);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->CoinId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->ZhiTuiPerfect);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->WithdrawLimit);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('FiancingLog');
    if ($this->Id !== null) {
      $xfer += $output->writeFieldBegin('Id', TType::I32, 1);
      $xfer += $output->writeI32($this->Id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->JiedianLock !== null) {
      $xfer += $output->writeFieldBegin('JiedianLock', TType::I32, 2);
      $xfer += $output->writeI32($this->JiedianLock);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->JiedianYeJi !== null) {
      $xfer += $output->writeFieldBegin('JiedianYeJi', TType::I32, 3);
      $xfer += $output->writeI32($this->JiedianYeJi);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->JiedianMember !== null) {
      $xfer += $output->writeFieldBegin('JiedianMember', TType::I32, 4);
      $xfer += $output->writeI32($this->JiedianMember);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->JiedianPerfect !== null) {
      $xfer += $output->writeFieldBegin('JiedianPerfect', TType::DOUBLE, 5);
      $xfer += $output->writeDouble($this->JiedianPerfect);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->DaJiedianLock !== null) {
      $xfer += $output->writeFieldBegin('DaJiedianLock', TType::I32, 6);
      $xfer += $output->writeI32($this->DaJiedianLock);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->DaJiedian !== null) {
      $xfer += $output->writeFieldBegin('DaJiedian', TType::I32, 7);
      $xfer += $output->writeI32($this->DaJiedian);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->DaJiedianMember !== null) {
      $xfer += $output->writeFieldBegin('DaJiedianMember', TType::I32, 8);
      $xfer += $output->writeI32($this->DaJiedianMember);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->DaJiedianPerfect !== null) {
      $xfer += $output->writeFieldBegin('DaJiedianPerfect', TType::DOUBLE, 9);
      $xfer += $output->writeDouble($this->DaJiedianPerfect);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ChaoJiedianLock !== null) {
      $xfer += $output->writeFieldBegin('ChaoJiedianLock', TType::I32, 10);
      $xfer += $output->writeI32($this->ChaoJiedianLock);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ChaoJiedianMember !== null) {
      $xfer += $output->writeFieldBegin('ChaoJiedianMember', TType::I32, 11);
      $xfer += $output->writeI32($this->ChaoJiedianMember);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ChaoJiedianPerfect !== null) {
      $xfer += $output->writeFieldBegin('ChaoJiedianPerfect', TType::DOUBLE, 12);
      $xfer += $output->writeDouble($this->ChaoJiedianPerfect);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ChaoJiedianDa !== null) {
      $xfer += $output->writeFieldBegin('ChaoJiedianDa', TType::I32, 13);
      $xfer += $output->writeI32($this->ChaoJiedianDa);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->CoinId !== null) {
      $xfer += $output->writeFieldBegin('CoinId', TType::I32, 14);
      $xfer += $output->writeI32($this->CoinId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ZhiTuiPerfect !== null) {
      $xfer += $output->writeFieldBegin('ZhiTuiPerfect', TType::DOUBLE, 15);
      $xfer += $output->writeDouble($this->ZhiTuiPerfect);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->WithdrawLimit !== null) {
      $xfer += $output->writeFieldBegin('WithdrawLimit', TType::BOOL, 16);
      $xfer += $output->writeBool($this->WithdrawLimit);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class FiancingMember {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'Id',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'MemberId',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    3 => array(
      'var' => 'MemberLVL',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    4 => array(
      'var' => 'Root',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'TouRu',
      'isRequired' => false,
      'type' => TType::DOUBLE,
      ),
    6 => array(
      'var' => 'LockMoney',
      'isRequired' => false,
      'type' => TType::DOUBLE,
      ),
    7 => array(
      'var' => 'MaxMoney',
      'isRequired' => false,
      'type' => TType::DOUBLE,
      ),
    8 => array(
      'var' => 'MaxWithdraw',
      'isRequired' => false,
      'type' => TType::DOUBLE,
      ),
    9 => array(
      'var' => 'ParentId',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    10 => array(
      'var' => 'FuHuaMoney',
      'isRequired' => false,
      'type' => TType::DOUBLE,
      ),
    11 => array(
      'var' => 'QuYuMoney',
      'isRequired' => false,
      'type' => TType::DOUBLE,
      ),
    12 => array(
      'var' => 'QuYuWithMoney',
      'isRequired' => false,
      'type' => TType::DOUBLE,
      ),
    13 => array(
      'var' => 'LastLVL',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    );

  /**
   * @var int
   */
  public $Id = null;
  /**
   * @var int
   */
  public $MemberId = null;
  /**
   * @var int
   */
  public $MemberLVL = null;
  /**
   * @var string
   */
  public $Root = null;
  /**
   * @var double
   */
  public $TouRu = null;
  /**
   * @var double
   */
  public $LockMoney = null;
  /**
   * @var double
   */
  public $MaxMoney = null;
  /**
   * @var double
   */
  public $MaxWithdraw = null;
  /**
   * @var int
   */
  public $ParentId = null;
  /**
   * @var double
   */
  public $FuHuaMoney = null;
  /**
   * @var double
   */
  public $QuYuMoney = null;
  /**
   * @var double
   */
  public $QuYuWithMoney = null;
  /**
   * @var int
   */
  public $LastLVL = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['Id'])) {
        $this->Id = $vals['Id'];
      }
      if (isset($vals['MemberId'])) {
        $this->MemberId = $vals['MemberId'];
      }
      if (isset($vals['MemberLVL'])) {
        $this->MemberLVL = $vals['MemberLVL'];
      }
      if (isset($vals['Root'])) {
        $this->Root = $vals['Root'];
      }
      if (isset($vals['TouRu'])) {
        $this->TouRu = $vals['TouRu'];
      }
      if (isset($vals['LockMoney'])) {
        $this->LockMoney = $vals['LockMoney'];
      }
      if (isset($vals['MaxMoney'])) {
        $this->MaxMoney = $vals['MaxMoney'];
      }
      if (isset($vals['MaxWithdraw'])) {
        $this->MaxWithdraw = $vals['MaxWithdraw'];
      }
      if (isset($vals['ParentId'])) {
        $this->ParentId = $vals['ParentId'];
      }
      if (isset($vals['FuHuaMoney'])) {
        $this->FuHuaMoney = $vals['FuHuaMoney'];
      }
      if (isset($vals['QuYuMoney'])) {
        $this->QuYuMoney = $vals['QuYuMoney'];
      }
      if (isset($vals['QuYuWithMoney'])) {
        $this->QuYuWithMoney = $vals['QuYuWithMoney'];
      }
      if (isset($vals['LastLVL'])) {
        $this->LastLVL = $vals['LastLVL'];
      }
    }
  }

  public function getName() {
    return 'FiancingMember';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->Id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->MemberId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->MemberLVL);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->Root);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->TouRu);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->LockMoney);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->MaxMoney);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->MaxWithdraw);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ParentId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->FuHuaMoney);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->QuYuMoney);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->QuYuWithMoney);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->LastLVL);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('FiancingMember');
    if ($this->Id !== null) {
      $xfer += $output->writeFieldBegin('Id', TType::I32, 1);
      $xfer += $output->writeI32($this->Id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->MemberId !== null) {
      $xfer += $output->writeFieldBegin('MemberId', TType::I32, 2);
      $xfer += $output->writeI32($this->MemberId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->MemberLVL !== null) {
      $xfer += $output->writeFieldBegin('MemberLVL', TType::I32, 3);
      $xfer += $output->writeI32($this->MemberLVL);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Root !== null) {
      $xfer += $output->writeFieldBegin('Root', TType::STRING, 4);
      $xfer += $output->writeString($this->Root);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->TouRu !== null) {
      $xfer += $output->writeFieldBegin('TouRu', TType::DOUBLE, 5);
      $xfer += $output->writeDouble($this->TouRu);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->LockMoney !== null) {
      $xfer += $output->writeFieldBegin('LockMoney', TType::DOUBLE, 6);
      $xfer += $output->writeDouble($this->LockMoney);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->MaxMoney !== null) {
      $xfer += $output->writeFieldBegin('MaxMoney', TType::DOUBLE, 7);
      $xfer += $output->writeDouble($this->MaxMoney);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->MaxWithdraw !== null) {
      $xfer += $output->writeFieldBegin('MaxWithdraw', TType::DOUBLE, 8);
      $xfer += $output->writeDouble($this->MaxWithdraw);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ParentId !== null) {
      $xfer += $output->writeFieldBegin('ParentId', TType::I32, 9);
      $xfer += $output->writeI32($this->ParentId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->FuHuaMoney !== null) {
      $xfer += $output->writeFieldBegin('FuHuaMoney', TType::DOUBLE, 10);
      $xfer += $output->writeDouble($this->FuHuaMoney);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->QuYuMoney !== null) {
      $xfer += $output->writeFieldBegin('QuYuMoney', TType::DOUBLE, 11);
      $xfer += $output->writeDouble($this->QuYuMoney);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->QuYuWithMoney !== null) {
      $xfer += $output->writeFieldBegin('QuYuWithMoney', TType::DOUBLE, 12);
      $xfer += $output->writeDouble($this->QuYuWithMoney);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->LastLVL !== null) {
      $xfer += $output->writeFieldBegin('LastLVL', TType::I32, 13);
      $xfer += $output->writeI32($this->LastLVL);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class FiancingProfit {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'Id',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'Mold',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    3 => array(
      'var' => 'MemberId',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    4 => array(
      'var' => 'Money',
      'isRequired' => false,
      'type' => TType::DOUBLE,
      ),
    5 => array(
      'var' => 'Date',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    6 => array(
      'var' => 'ProcessTime',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    7 => array(
      'var' => 'Status',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    8 => array(
      'var' => 'FinancingInterestId',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    );

  /**
   * @var int
   */
  public $Id = null;
  /**
   * @var int
   */
  public $Mold = null;
  /**
   * @var int
   */
  public $MemberId = null;
  /**
   * @var double
   */
  public $Money = null;
  /**
   * @var int
   */
  public $Date = null;
  /**
   * @var int
   */
  public $ProcessTime = null;
  /**
   * @var int
   */
  public $Status = null;
  /**
   * @var int
   */
  public $FinancingInterestId = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['Id'])) {
        $this->Id = $vals['Id'];
      }
      if (isset($vals['Mold'])) {
        $this->Mold = $vals['Mold'];
      }
      if (isset($vals['MemberId'])) {
        $this->MemberId = $vals['MemberId'];
      }
      if (isset($vals['Money'])) {
        $this->Money = $vals['Money'];
      }
      if (isset($vals['Date'])) {
        $this->Date = $vals['Date'];
      }
      if (isset($vals['ProcessTime'])) {
        $this->ProcessTime = $vals['ProcessTime'];
      }
      if (isset($vals['Status'])) {
        $this->Status = $vals['Status'];
      }
      if (isset($vals['FinancingInterestId'])) {
        $this->FinancingInterestId = $vals['FinancingInterestId'];
      }
    }
  }

  public function getName() {
    return 'FiancingProfit';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->Id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->Mold);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->MemberId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->Money);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->Date);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->ProcessTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->Status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->FinancingInterestId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('FiancingProfit');
    if ($this->Id !== null) {
      $xfer += $output->writeFieldBegin('Id', TType::I32, 1);
      $xfer += $output->writeI32($this->Id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Mold !== null) {
      $xfer += $output->writeFieldBegin('Mold', TType::I32, 2);
      $xfer += $output->writeI32($this->Mold);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->MemberId !== null) {
      $xfer += $output->writeFieldBegin('MemberId', TType::I32, 3);
      $xfer += $output->writeI32($this->MemberId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Money !== null) {
      $xfer += $output->writeFieldBegin('Money', TType::DOUBLE, 4);
      $xfer += $output->writeDouble($this->Money);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Date !== null) {
      $xfer += $output->writeFieldBegin('Date', TType::I32, 5);
      $xfer += $output->writeI32($this->Date);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ProcessTime !== null) {
      $xfer += $output->writeFieldBegin('ProcessTime', TType::I64, 6);
      $xfer += $output->writeI64($this->ProcessTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Status !== null) {
      $xfer += $output->writeFieldBegin('Status', TType::I32, 7);
      $xfer += $output->writeI32($this->Status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->FinancingInterestId !== null) {
      $xfer += $output->writeFieldBegin('FinancingInterestId', TType::I32, 8);
      $xfer += $output->writeI32($this->FinancingInterestId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class FinancingDetails {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'Id',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'FinancingProductId',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    3 => array(
      'var' => 'MemberId',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    4 => array(
      'var' => 'Num',
      'isRequired' => false,
      'type' => TType::DOUBLE,
      ),
    5 => array(
      'var' => 'LockDay',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    6 => array(
      'var' => 'Status',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    7 => array(
      'var' => 'Perfect',
      'isRequired' => false,
      'type' => TType::DOUBLE,
      ),
    8 => array(
      'var' => 'UnLockDay',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    9 => array(
      'var' => 'AddTime',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    10 => array(
      'var' => 'UnLockTime',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    );

  /**
   * @var int
   */
  public $Id = null;
  /**
   * @var int
   */
  public $FinancingProductId = null;
  /**
   * @var int
   */
  public $MemberId = null;
  /**
   * @var double
   */
  public $Num = null;
  /**
   * @var int
   */
  public $LockDay = null;
  /**
   * @var int
   */
  public $Status = null;
  /**
   * @var double
   */
  public $Perfect = null;
  /**
   * @var int
   */
  public $UnLockDay = null;
  /**
   * @var int
   */
  public $AddTime = null;
  /**
   * @var int
   */
  public $UnLockTime = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['Id'])) {
        $this->Id = $vals['Id'];
      }
      if (isset($vals['FinancingProductId'])) {
        $this->FinancingProductId = $vals['FinancingProductId'];
      }
      if (isset($vals['MemberId'])) {
        $this->MemberId = $vals['MemberId'];
      }
      if (isset($vals['Num'])) {
        $this->Num = $vals['Num'];
      }
      if (isset($vals['LockDay'])) {
        $this->LockDay = $vals['LockDay'];
      }
      if (isset($vals['Status'])) {
        $this->Status = $vals['Status'];
      }
      if (isset($vals['Perfect'])) {
        $this->Perfect = $vals['Perfect'];
      }
      if (isset($vals['UnLockDay'])) {
        $this->UnLockDay = $vals['UnLockDay'];
      }
      if (isset($vals['AddTime'])) {
        $this->AddTime = $vals['AddTime'];
      }
      if (isset($vals['UnLockTime'])) {
        $this->UnLockTime = $vals['UnLockTime'];
      }
    }
  }

  public function getName() {
    return 'FinancingDetails';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->Id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->FinancingProductId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->MemberId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->Num);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->LockDay);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->Status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->Perfect);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->UnLockDay);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->AddTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->UnLockTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('FinancingDetails');
    if ($this->Id !== null) {
      $xfer += $output->writeFieldBegin('Id', TType::I32, 1);
      $xfer += $output->writeI32($this->Id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->FinancingProductId !== null) {
      $xfer += $output->writeFieldBegin('FinancingProductId', TType::I32, 2);
      $xfer += $output->writeI32($this->FinancingProductId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->MemberId !== null) {
      $xfer += $output->writeFieldBegin('MemberId', TType::I32, 3);
      $xfer += $output->writeI32($this->MemberId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Num !== null) {
      $xfer += $output->writeFieldBegin('Num', TType::DOUBLE, 4);
      $xfer += $output->writeDouble($this->Num);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->LockDay !== null) {
      $xfer += $output->writeFieldBegin('LockDay', TType::I32, 5);
      $xfer += $output->writeI32($this->LockDay);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Status !== null) {
      $xfer += $output->writeFieldBegin('Status', TType::I32, 6);
      $xfer += $output->writeI32($this->Status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Perfect !== null) {
      $xfer += $output->writeFieldBegin('Perfect', TType::DOUBLE, 7);
      $xfer += $output->writeDouble($this->Perfect);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->UnLockDay !== null) {
      $xfer += $output->writeFieldBegin('UnLockDay', TType::I32, 8);
      $xfer += $output->writeI32($this->UnLockDay);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->AddTime !== null) {
      $xfer += $output->writeFieldBegin('AddTime', TType::I64, 9);
      $xfer += $output->writeI64($this->AddTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->UnLockTime !== null) {
      $xfer += $output->writeFieldBegin('UnLockTime', TType::I64, 10);
      $xfer += $output->writeI64($this->UnLockTime);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class FinancingInterest {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'Id',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'MemberId',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    3 => array(
      'var' => 'Money',
      'isRequired' => false,
      'type' => TType::DOUBLE,
      ),
    4 => array(
      'var' => 'Status',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    5 => array(
      'var' => 'Date',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    6 => array(
      'var' => 'ProcessTime',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    7 => array(
      'var' => 'FinancingDetailsId',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    );

  /**
   * @var int
   */
  public $Id = null;
  /**
   * @var int
   */
  public $MemberId = null;
  /**
   * @var double
   */
  public $Money = null;
  /**
   * @var int
   */
  public $Status = null;
  /**
   * @var int
   */
  public $Date = null;
  /**
   * @var int
   */
  public $ProcessTime = null;
  /**
   * @var int
   */
  public $FinancingDetailsId = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['Id'])) {
        $this->Id = $vals['Id'];
      }
      if (isset($vals['MemberId'])) {
        $this->MemberId = $vals['MemberId'];
      }
      if (isset($vals['Money'])) {
        $this->Money = $vals['Money'];
      }
      if (isset($vals['Status'])) {
        $this->Status = $vals['Status'];
      }
      if (isset($vals['Date'])) {
        $this->Date = $vals['Date'];
      }
      if (isset($vals['ProcessTime'])) {
        $this->ProcessTime = $vals['ProcessTime'];
      }
      if (isset($vals['FinancingDetailsId'])) {
        $this->FinancingDetailsId = $vals['FinancingDetailsId'];
      }
    }
  }

  public function getName() {
    return 'FinancingInterest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->Id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->MemberId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->Money);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->Status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->Date);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->ProcessTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->FinancingDetailsId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('FinancingInterest');
    if ($this->Id !== null) {
      $xfer += $output->writeFieldBegin('Id', TType::I32, 1);
      $xfer += $output->writeI32($this->Id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->MemberId !== null) {
      $xfer += $output->writeFieldBegin('MemberId', TType::I32, 2);
      $xfer += $output->writeI32($this->MemberId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Money !== null) {
      $xfer += $output->writeFieldBegin('Money', TType::DOUBLE, 3);
      $xfer += $output->writeDouble($this->Money);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Status !== null) {
      $xfer += $output->writeFieldBegin('Status', TType::I32, 4);
      $xfer += $output->writeI32($this->Status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Date !== null) {
      $xfer += $output->writeFieldBegin('Date', TType::I32, 5);
      $xfer += $output->writeI32($this->Date);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ProcessTime !== null) {
      $xfer += $output->writeFieldBegin('ProcessTime', TType::I64, 6);
      $xfer += $output->writeI64($this->ProcessTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->FinancingDetailsId !== null) {
      $xfer += $output->writeFieldBegin('FinancingDetailsId', TType::I32, 7);
      $xfer += $output->writeI32($this->FinancingDetailsId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class FinancingProduct {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'id',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'Title',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'Perfect',
      'isRequired' => false,
      'type' => TType::DOUBLE,
      ),
    4 => array(
      'var' => 'LockDay',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    5 => array(
      'var' => 'MinBuy',
      'isRequired' => false,
      'type' => TType::DOUBLE,
      ),
    6 => array(
      'var' => 'Max',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    7 => array(
      'var' => 'Withdraw',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    );

  /**
   * @var int
   */
  public $id = null;
  /**
   * @var string
   */
  public $Title = null;
  /**
   * @var double
   */
  public $Perfect = null;
  /**
   * @var int
   */
  public $LockDay = null;
  /**
   * @var double
   */
  public $MinBuy = null;
  /**
   * @var int
   */
  public $Max = null;
  /**
   * @var int
   */
  public $Withdraw = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['Title'])) {
        $this->Title = $vals['Title'];
      }
      if (isset($vals['Perfect'])) {
        $this->Perfect = $vals['Perfect'];
      }
      if (isset($vals['LockDay'])) {
        $this->LockDay = $vals['LockDay'];
      }
      if (isset($vals['MinBuy'])) {
        $this->MinBuy = $vals['MinBuy'];
      }
      if (isset($vals['Max'])) {
        $this->Max = $vals['Max'];
      }
      if (isset($vals['Withdraw'])) {
        $this->Withdraw = $vals['Withdraw'];
      }
    }
  }

  public function getName() {
    return 'FinancingProduct';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->Title);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->Perfect);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->LockDay);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->MinBuy);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->Max);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->Withdraw);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('FinancingProduct');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I32, 1);
      $xfer += $output->writeI32($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Title !== null) {
      $xfer += $output->writeFieldBegin('Title', TType::STRING, 2);
      $xfer += $output->writeString($this->Title);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Perfect !== null) {
      $xfer += $output->writeFieldBegin('Perfect', TType::DOUBLE, 3);
      $xfer += $output->writeDouble($this->Perfect);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->LockDay !== null) {
      $xfer += $output->writeFieldBegin('LockDay', TType::I32, 4);
      $xfer += $output->writeI32($this->LockDay);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->MinBuy !== null) {
      $xfer += $output->writeFieldBegin('MinBuy', TType::DOUBLE, 5);
      $xfer += $output->writeDouble($this->MinBuy);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Max !== null) {
      $xfer += $output->writeFieldBegin('Max', TType::I32, 6);
      $xfer += $output->writeI32($this->Max);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Withdraw !== null) {
      $xfer += $output->writeFieldBegin('Withdraw', TType::I32, 7);
      $xfer += $output->writeI32($this->Withdraw);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class FiancingProfitList {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'Data',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\FuHuaService\Model\FiancingProfit',
        ),
      ),
    2 => array(
      'var' => 'PageSize',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    3 => array(
      'var' => 'PageIndex',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    4 => array(
      'var' => 'OutCount',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    );

  /**
   * @var \FuHuaService\Model\FiancingProfit[]
   */
  public $Data = null;
  /**
   * @var int
   */
  public $PageSize = null;
  /**
   * @var int
   */
  public $PageIndex = null;
  /**
   * @var int
   */
  public $OutCount = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['Data'])) {
        $this->Data = $vals['Data'];
      }
      if (isset($vals['PageSize'])) {
        $this->PageSize = $vals['PageSize'];
      }
      if (isset($vals['PageIndex'])) {
        $this->PageIndex = $vals['PageIndex'];
      }
      if (isset($vals['OutCount'])) {
        $this->OutCount = $vals['OutCount'];
      }
    }
  }

  public function getName() {
    return 'FiancingProfitList';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->Data = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $elem5 = new \FuHuaService\Model\FiancingProfit();
              $xfer += $elem5->read($input);
              $this->Data []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->PageSize);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->PageIndex);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->OutCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('FiancingProfitList');
    if ($this->Data !== null) {
      if (!is_array($this->Data)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('Data', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->Data));
        {
          foreach ($this->Data as $iter6)
          {
            $xfer += $iter6->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->PageSize !== null) {
      $xfer += $output->writeFieldBegin('PageSize', TType::I32, 2);
      $xfer += $output->writeI32($this->PageSize);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->PageIndex !== null) {
      $xfer += $output->writeFieldBegin('PageIndex', TType::I32, 3);
      $xfer += $output->writeI32($this->PageIndex);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->OutCount !== null) {
      $xfer += $output->writeFieldBegin('OutCount', TType::I32, 4);
      $xfer += $output->writeI32($this->OutCount);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class FinancingDetailsList {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'Data',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\FuHuaService\Model\FinancingDetails',
        ),
      ),
    2 => array(
      'var' => 'PageSize',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    3 => array(
      'var' => 'PageIndex',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    4 => array(
      'var' => 'OutCount',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    );

  /**
   * @var \FuHuaService\Model\FinancingDetails[]
   */
  public $Data = null;
  /**
   * @var int
   */
  public $PageSize = null;
  /**
   * @var int
   */
  public $PageIndex = null;
  /**
   * @var int
   */
  public $OutCount = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['Data'])) {
        $this->Data = $vals['Data'];
      }
      if (isset($vals['PageSize'])) {
        $this->PageSize = $vals['PageSize'];
      }
      if (isset($vals['PageIndex'])) {
        $this->PageIndex = $vals['PageIndex'];
      }
      if (isset($vals['OutCount'])) {
        $this->OutCount = $vals['OutCount'];
      }
    }
  }

  public function getName() {
    return 'FinancingDetailsList';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->Data = array();
            $_size7 = 0;
            $_etype10 = 0;
            $xfer += $input->readListBegin($_etype10, $_size7);
            for ($_i11 = 0; $_i11 < $_size7; ++$_i11)
            {
              $elem12 = null;
              $elem12 = new \FuHuaService\Model\FinancingDetails();
              $xfer += $elem12->read($input);
              $this->Data []= $elem12;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->PageSize);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->PageIndex);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->OutCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('FinancingDetailsList');
    if ($this->Data !== null) {
      if (!is_array($this->Data)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('Data', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->Data));
        {
          foreach ($this->Data as $iter13)
          {
            $xfer += $iter13->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->PageSize !== null) {
      $xfer += $output->writeFieldBegin('PageSize', TType::I32, 2);
      $xfer += $output->writeI32($this->PageSize);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->PageIndex !== null) {
      $xfer += $output->writeFieldBegin('PageIndex', TType::I32, 3);
      $xfer += $output->writeI32($this->PageIndex);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->OutCount !== null) {
      $xfer += $output->writeFieldBegin('OutCount', TType::I32, 4);
      $xfer += $output->writeI32($this->OutCount);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MemberCashList {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'Id',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'AddTime',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    3 => array(
      'var' => 'Balance',
      'isRequired' => false,
      'type' => TType::DOUBLE,
      ),
    4 => array(
      'var' => 'CoinId',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    5 => array(
      'var' => 'CoinName',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    6 => array(
      'var' => 'MemberId',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    7 => array(
      'var' => 'Mold',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    8 => array(
      'var' => 'MoldTitle',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    9 => array(
      'var' => 'Money',
      'isRequired' => false,
      'type' => TType::DOUBLE,
      ),
    10 => array(
      'var' => 'Remark',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var int
   */
  public $Id = null;
  /**
   * @var int
   */
  public $AddTime = null;
  /**
   * @var double
   */
  public $Balance = null;
  /**
   * @var int
   */
  public $CoinId = null;
  /**
   * @var string
   */
  public $CoinName = null;
  /**
   * @var int
   */
  public $MemberId = null;
  /**
   * @var int
   */
  public $Mold = null;
  /**
   * @var string
   */
  public $MoldTitle = null;
  /**
   * @var double
   */
  public $Money = null;
  /**
   * @var string
   */
  public $Remark = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['Id'])) {
        $this->Id = $vals['Id'];
      }
      if (isset($vals['AddTime'])) {
        $this->AddTime = $vals['AddTime'];
      }
      if (isset($vals['Balance'])) {
        $this->Balance = $vals['Balance'];
      }
      if (isset($vals['CoinId'])) {
        $this->CoinId = $vals['CoinId'];
      }
      if (isset($vals['CoinName'])) {
        $this->CoinName = $vals['CoinName'];
      }
      if (isset($vals['MemberId'])) {
        $this->MemberId = $vals['MemberId'];
      }
      if (isset($vals['Mold'])) {
        $this->Mold = $vals['Mold'];
      }
      if (isset($vals['MoldTitle'])) {
        $this->MoldTitle = $vals['MoldTitle'];
      }
      if (isset($vals['Money'])) {
        $this->Money = $vals['Money'];
      }
      if (isset($vals['Remark'])) {
        $this->Remark = $vals['Remark'];
      }
    }
  }

  public function getName() {
    return 'MemberCashList';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->Id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->AddTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->Balance);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->CoinId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->CoinName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->MemberId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->Mold);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->MoldTitle);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->Money);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->Remark);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MemberCashList');
    if ($this->Id !== null) {
      $xfer += $output->writeFieldBegin('Id', TType::I32, 1);
      $xfer += $output->writeI32($this->Id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->AddTime !== null) {
      $xfer += $output->writeFieldBegin('AddTime', TType::I64, 2);
      $xfer += $output->writeI64($this->AddTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Balance !== null) {
      $xfer += $output->writeFieldBegin('Balance', TType::DOUBLE, 3);
      $xfer += $output->writeDouble($this->Balance);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->CoinId !== null) {
      $xfer += $output->writeFieldBegin('CoinId', TType::I32, 4);
      $xfer += $output->writeI32($this->CoinId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->CoinName !== null) {
      $xfer += $output->writeFieldBegin('CoinName', TType::STRING, 5);
      $xfer += $output->writeString($this->CoinName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->MemberId !== null) {
      $xfer += $output->writeFieldBegin('MemberId', TType::I32, 6);
      $xfer += $output->writeI32($this->MemberId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Mold !== null) {
      $xfer += $output->writeFieldBegin('Mold', TType::I32, 7);
      $xfer += $output->writeI32($this->Mold);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->MoldTitle !== null) {
      $xfer += $output->writeFieldBegin('MoldTitle', TType::STRING, 8);
      $xfer += $output->writeString($this->MoldTitle);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Money !== null) {
      $xfer += $output->writeFieldBegin('Money', TType::DOUBLE, 9);
      $xfer += $output->writeDouble($this->Money);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Remark !== null) {
      $xfer += $output->writeFieldBegin('Remark', TType::STRING, 10);
      $xfer += $output->writeString($this->Remark);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MemberCashLists {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'Data',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\FuHuaService\Model\MemberCashList',
        ),
      ),
    2 => array(
      'var' => 'PageSize',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    3 => array(
      'var' => 'PageIndex',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    4 => array(
      'var' => 'OutCount',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    );

  /**
   * @var \FuHuaService\Model\MemberCashList[]
   */
  public $Data = null;
  /**
   * @var int
   */
  public $PageSize = null;
  /**
   * @var int
   */
  public $PageIndex = null;
  /**
   * @var int
   */
  public $OutCount = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['Data'])) {
        $this->Data = $vals['Data'];
      }
      if (isset($vals['PageSize'])) {
        $this->PageSize = $vals['PageSize'];
      }
      if (isset($vals['PageIndex'])) {
        $this->PageIndex = $vals['PageIndex'];
      }
      if (isset($vals['OutCount'])) {
        $this->OutCount = $vals['OutCount'];
      }
    }
  }

  public function getName() {
    return 'MemberCashLists';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->Data = array();
            $_size14 = 0;
            $_etype17 = 0;
            $xfer += $input->readListBegin($_etype17, $_size14);
            for ($_i18 = 0; $_i18 < $_size14; ++$_i18)
            {
              $elem19 = null;
              $elem19 = new \FuHuaService\Model\MemberCashList();
              $xfer += $elem19->read($input);
              $this->Data []= $elem19;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->PageSize);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->PageIndex);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->OutCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MemberCashLists');
    if ($this->Data !== null) {
      if (!is_array($this->Data)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('Data', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->Data));
        {
          foreach ($this->Data as $iter20)
          {
            $xfer += $iter20->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->PageSize !== null) {
      $xfer += $output->writeFieldBegin('PageSize', TType::I32, 2);
      $xfer += $output->writeI32($this->PageSize);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->PageIndex !== null) {
      $xfer += $output->writeFieldBegin('PageIndex', TType::I32, 3);
      $xfer += $output->writeI32($this->PageIndex);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->OutCount !== null) {
      $xfer += $output->writeFieldBegin('OutCount', TType::I32, 4);
      $xfer += $output->writeI32($this->OutCount);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class FiancingMemberListResult {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'Data',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\FuHuaService\Model\FiancingMember',
        ),
      ),
    2 => array(
      'var' => 'PageSize',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    3 => array(
      'var' => 'PageIndex',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    4 => array(
      'var' => 'OutCount',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    );

  /**
   * @var \FuHuaService\Model\FiancingMember[]
   */
  public $Data = null;
  /**
   * @var int
   */
  public $PageSize = null;
  /**
   * @var int
   */
  public $PageIndex = null;
  /**
   * @var int
   */
  public $OutCount = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['Data'])) {
        $this->Data = $vals['Data'];
      }
      if (isset($vals['PageSize'])) {
        $this->PageSize = $vals['PageSize'];
      }
      if (isset($vals['PageIndex'])) {
        $this->PageIndex = $vals['PageIndex'];
      }
      if (isset($vals['OutCount'])) {
        $this->OutCount = $vals['OutCount'];
      }
    }
  }

  public function getName() {
    return 'FiancingMemberListResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->Data = array();
            $_size21 = 0;
            $_etype24 = 0;
            $xfer += $input->readListBegin($_etype24, $_size21);
            for ($_i25 = 0; $_i25 < $_size21; ++$_i25)
            {
              $elem26 = null;
              $elem26 = new \FuHuaService\Model\FiancingMember();
              $xfer += $elem26->read($input);
              $this->Data []= $elem26;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->PageSize);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->PageIndex);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->OutCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('FiancingMemberListResult');
    if ($this->Data !== null) {
      if (!is_array($this->Data)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('Data', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->Data));
        {
          foreach ($this->Data as $iter27)
          {
            $xfer += $iter27->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->PageSize !== null) {
      $xfer += $output->writeFieldBegin('PageSize', TType::I32, 2);
      $xfer += $output->writeI32($this->PageSize);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->PageIndex !== null) {
      $xfer += $output->writeFieldBegin('PageIndex', TType::I32, 3);
      $xfer += $output->writeI32($this->PageIndex);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->OutCount !== null) {
      $xfer += $output->writeFieldBegin('OutCount', TType::I32, 4);
      $xfer += $output->writeI32($this->OutCount);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class NoProcess {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'id',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'date',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    );

  /**
   * @var int
   */
  public $id = null;
  /**
   * @var int
   */
  public $date = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['date'])) {
        $this->date = $vals['date'];
      }
    }
  }

  public function getName() {
    return 'NoProcess';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->date);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('NoProcess');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I32, 1);
      $xfer += $output->writeI32($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->date !== null) {
      $xfer += $output->writeFieldBegin('date', TType::I32, 2);
      $xfer += $output->writeI32($this->date);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class DetailsProfit {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'id',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'money',
      'isRequired' => false,
      'type' => TType::DOUBLE,
      ),
    );

  /**
   * @var int
   */
  public $id = null;
  /**
   * @var double
   */
  public $money = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['money'])) {
        $this->money = $vals['money'];
      }
    }
  }

  public function getName() {
    return 'DetailsProfit';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->money);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('DetailsProfit');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I32, 1);
      $xfer += $output->writeI32($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->money !== null) {
      $xfer += $output->writeFieldBegin('money', TType::DOUBLE, 2);
      $xfer += $output->writeDouble($this->money);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}



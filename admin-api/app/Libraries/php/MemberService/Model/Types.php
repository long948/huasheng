<?php
namespace MemberService\Model;

/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


final class LoginStatus {
  const AccountErr = 0;
  const Success = 1;
  const PasswordErr = 2;
  const Disabled = 3;
  const Mistake = 4;
  const PrivateKeyErr = 5;
  const MnemonicKeyErr = 6;
  static public $__names = array(
    0 => 'AccountErr',
    1 => 'Success',
    2 => 'PasswordErr',
    3 => 'Disabled',
    4 => 'Mistake',
    5 => 'PrivateKeyErr',
    6 => 'MnemonicKeyErr',
  );
}

final class AuthStatus {
  const NotPass = 0;
  const Success = 1;
  const NameErr = 2;
  const IdCardErr = 3;
  const IdCardFile1Err = 4;
  const IdCardFile2Err = 5;
  const StatusErr = 6;
  static public $__names = array(
    0 => 'NotPass',
    1 => 'Success',
    2 => 'NameErr',
    3 => 'IdCardErr',
    4 => 'IdCardFile1Err',
    5 => 'IdCardFile2Err',
    6 => 'StatusErr',
  );
}

final class BackupsStatus {
  const Success = 1;
  const NotExists = 2;
  const BackupAlready = 3;
  const BackupsError = 4;
  static public $__names = array(
    1 => 'Success',
    2 => 'NotExists',
    3 => 'BackupAlready',
    4 => 'BackupsError',
  );
}

class Members {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'Id',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'EMail',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'Mobile',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'Nick',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'MnemonicKey',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    6 => array(
      'var' => 'PrivateKey',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    7 => array(
      'var' => 'IsBak',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    8 => array(
      'var' => 'PayPassword',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    9 => array(
      'var' => 'Password',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    10 => array(
      'var' => 'Status',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    11 => array(
      'var' => 'ParentId',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    12 => array(
      'var' => 'ParentMobile',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    13 => array(
      'var' => 'GoogleKey',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    14 => array(
      'var' => 'IsBindGoogle',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    15 => array(
      'var' => 'IsBindMobile',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    16 => array(
      'var' => 'AuthStatus',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    17 => array(
      'var' => 'RegisterTime',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    18 => array(
      'var' => 'RegisterIP',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    19 => array(
      'var' => 'Root',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    20 => array(
      'var' => 'InviteCode',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    21 => array(
      'var' => 'AuthName',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    22 => array(
      'var' => 'IdCardNo',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    23 => array(
      'var' => 'Token',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    24 => array(
      'var' => 'Head',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    25 => array(
      'var' => 'Country',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    );

  /**
   * @var int
   */
  public $Id = null;
  /**
   * @var string
   */
  public $EMail = null;
  /**
   * @var string
   */
  public $Mobile = null;
  /**
   * @var string
   */
  public $Nick = null;
  /**
   * @var string
   */
  public $MnemonicKey = null;
  /**
   * @var string
   */
  public $PrivateKey = null;
  /**
   * @var bool
   */
  public $IsBak = null;
  /**
   * @var string
   */
  public $PayPassword = null;
  /**
   * @var string
   */
  public $Password = null;
  /**
   * @var int
   */
  public $Status = null;
  /**
   * @var int
   */
  public $ParentId = null;
  /**
   * @var string
   */
  public $ParentMobile = null;
  /**
   * @var string
   */
  public $GoogleKey = null;
  /**
   * @var bool
   */
  public $IsBindGoogle = null;
  /**
   * @var bool
   */
  public $IsBindMobile = null;
  /**
   * @var int
   */
  public $AuthStatus = null;
  /**
   * @var int
   */
  public $RegisterTime = null;
  /**
   * @var string
   */
  public $RegisterIP = null;
  /**
   * @var string
   */
  public $Root = null;
  /**
   * @var string
   */
  public $InviteCode = null;
  /**
   * @var string
   */
  public $AuthName = null;
  /**
   * @var string
   */
  public $IdCardNo = null;
  /**
   * @var string
   */
  public $Token = null;
  /**
   * @var string
   */
  public $Head = null;
  /**
 * @var int
 */
    public $Country = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['Id'])) {
        $this->Id = $vals['Id'];
      }
      if (isset($vals['EMail'])) {
        $this->EMail = $vals['EMail'];
      }
      if (isset($vals['Mobile'])) {
        $this->Mobile = $vals['Mobile'];
      }
      if (isset($vals['Nick'])) {
        $this->Nick = $vals['Nick'];
      }
      if (isset($vals['MnemonicKey'])) {
        $this->MnemonicKey = $vals['MnemonicKey'];
      }
      if (isset($vals['PrivateKey'])) {
        $this->PrivateKey = $vals['PrivateKey'];
      }
      if (isset($vals['IsBak'])) {
        $this->IsBak = $vals['IsBak'];
      }
      if (isset($vals['PayPassword'])) {
        $this->PayPassword = $vals['PayPassword'];
      }
      if (isset($vals['Password'])) {
        $this->Password = $vals['Password'];
      }
      if (isset($vals['Status'])) {
        $this->Status = $vals['Status'];
      }
      if (isset($vals['ParentId'])) {
        $this->ParentId = $vals['ParentId'];
      }
      if (isset($vals['ParentMobile'])) {
        $this->ParentMobile = $vals['ParentMobile'];
      }
      if (isset($vals['GoogleKey'])) {
        $this->GoogleKey = $vals['GoogleKey'];
      }
      if (isset($vals['IsBindGoogle'])) {
        $this->IsBindGoogle = $vals['IsBindGoogle'];
      }
      if (isset($vals['IsBindMobile'])) {
        $this->IsBindMobile = $vals['IsBindMobile'];
      }
      if (isset($vals['AuthStatus'])) {
        $this->AuthStatus = $vals['AuthStatus'];
      }
      if (isset($vals['RegisterTime'])) {
        $this->RegisterTime = $vals['RegisterTime'];
      }
      if (isset($vals['RegisterIP'])) {
        $this->RegisterIP = $vals['RegisterIP'];
      }
      if (isset($vals['Root'])) {
        $this->Root = $vals['Root'];
      }
      if (isset($vals['InviteCode'])) {
        $this->InviteCode = $vals['InviteCode'];
      }
      if (isset($vals['AuthName'])) {
        $this->AuthName = $vals['AuthName'];
      }
      if (isset($vals['IdCardNo'])) {
        $this->IdCardNo = $vals['IdCardNo'];
      }
      if (isset($vals['Token'])) {
        $this->Token = $vals['Token'];
      }
      if (isset($vals['Head'])) {
        $this->Head = $vals['Head'];
      }
      if (isset($vals['Country'])) {
        $this->Country = $vals['Country'];
      }
    }
  }

  public function getName() {
    return 'Members';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->Id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->EMail);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->Mobile);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->Nick);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->MnemonicKey);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->PrivateKey);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->IsBak);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->PayPassword);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->Password);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->Status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ParentId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ParentMobile);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->GoogleKey);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->IsBindGoogle);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->IsBindMobile);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->AuthStatus);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->RegisterTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 18:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->RegisterIP);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 19:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->Root);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->InviteCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 21:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->AuthName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 22:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->IdCardNo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 23:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->Token);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 24:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->Head);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 25:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->Country);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Members');
    if ($this->Id !== null) {
      $xfer += $output->writeFieldBegin('Id', TType::I32, 1);
      $xfer += $output->writeI32($this->Id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->EMail !== null) {
      $xfer += $output->writeFieldBegin('EMail', TType::STRING, 2);
      $xfer += $output->writeString($this->EMail);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Mobile !== null) {
      $xfer += $output->writeFieldBegin('Mobile', TType::STRING, 3);
      $xfer += $output->writeString($this->Mobile);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Nick !== null) {
      $xfer += $output->writeFieldBegin('Nick', TType::STRING, 4);
      $xfer += $output->writeString($this->Nick);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->MnemonicKey !== null) {
      $xfer += $output->writeFieldBegin('MnemonicKey', TType::STRING, 5);
      $xfer += $output->writeString($this->MnemonicKey);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->PrivateKey !== null) {
      $xfer += $output->writeFieldBegin('PrivateKey', TType::STRING, 6);
      $xfer += $output->writeString($this->PrivateKey);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->IsBak !== null) {
      $xfer += $output->writeFieldBegin('IsBak', TType::BOOL, 7);
      $xfer += $output->writeBool($this->IsBak);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->PayPassword !== null) {
      $xfer += $output->writeFieldBegin('PayPassword', TType::STRING, 8);
      $xfer += $output->writeString($this->PayPassword);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Password !== null) {
      $xfer += $output->writeFieldBegin('Password', TType::STRING, 9);
      $xfer += $output->writeString($this->Password);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Status !== null) {
      $xfer += $output->writeFieldBegin('Status', TType::I32, 10);
      $xfer += $output->writeI32($this->Status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ParentId !== null) {
      $xfer += $output->writeFieldBegin('ParentId', TType::I32, 11);
      $xfer += $output->writeI32($this->ParentId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ParentMobile !== null) {
      $xfer += $output->writeFieldBegin('ParentMobile', TType::STRING, 12);
      $xfer += $output->writeString($this->ParentMobile);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->GoogleKey !== null) {
      $xfer += $output->writeFieldBegin('GoogleKey', TType::STRING, 13);
      $xfer += $output->writeString($this->GoogleKey);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->IsBindGoogle !== null) {
      $xfer += $output->writeFieldBegin('IsBindGoogle', TType::BOOL, 14);
      $xfer += $output->writeBool($this->IsBindGoogle);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->IsBindMobile !== null) {
      $xfer += $output->writeFieldBegin('IsBindMobile', TType::BOOL, 15);
      $xfer += $output->writeBool($this->IsBindMobile);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->AuthStatus !== null) {
      $xfer += $output->writeFieldBegin('AuthStatus', TType::I32, 16);
      $xfer += $output->writeI32($this->AuthStatus);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->RegisterTime !== null) {
      $xfer += $output->writeFieldBegin('RegisterTime', TType::I64, 17);
      $xfer += $output->writeI64($this->RegisterTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->RegisterIP !== null) {
      $xfer += $output->writeFieldBegin('RegisterIP', TType::STRING, 18);
      $xfer += $output->writeString($this->RegisterIP);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Root !== null) {
      $xfer += $output->writeFieldBegin('Root', TType::STRING, 19);
      $xfer += $output->writeString($this->Root);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->InviteCode !== null) {
      $xfer += $output->writeFieldBegin('InviteCode', TType::STRING, 20);
      $xfer += $output->writeString($this->InviteCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->AuthName !== null) {
      $xfer += $output->writeFieldBegin('AuthName', TType::STRING, 21);
      $xfer += $output->writeString($this->AuthName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->IdCardNo !== null) {
      $xfer += $output->writeFieldBegin('IdCardNo', TType::STRING, 22);
      $xfer += $output->writeString($this->IdCardNo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Token !== null) {
      $xfer += $output->writeFieldBegin('Token', TType::STRING, 23);
      $xfer += $output->writeString($this->Token);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Head !== null) {
      $xfer += $output->writeFieldBegin('Head', TType::STRING, 24);
      $xfer += $output->writeString($this->Head);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Country !== null) {
      $xfer += $output->writeFieldBegin('Country', TType::I32, 25);
      $xfer += $output->writeI32($this->Country);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MemberCountry {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'Id',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'Areacode',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'Country',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'Ext',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'Skin',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var int
   */
  public $Id = null;
  /**
   * @var string
   */
  public $Areacode = null;
  /**
   * @var string
   */
  public $Country = null;
  /**
   * @var string
   */
  public $Ext = null;
  /**
   * @var string
   */
  public $Skin = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['Id'])) {
        $this->Id = $vals['Id'];
      }
      if (isset($vals['Areacode'])) {
        $this->Areacode = $vals['Areacode'];
      }
      if (isset($vals['Country'])) {
        $this->Country = $vals['Country'];
      }
      if (isset($vals['Ext'])) {
        $this->Ext = $vals['Ext'];
      }
      if (isset($vals['Skin'])) {
        $this->Skin = $vals['Skin'];
      }
    }
  }

  public function getName() {
    return 'MemberCountry';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->Id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->Areacode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->Country);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->Ext);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->Skin);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MemberCountry');
    if ($this->Id !== null) {
      $xfer += $output->writeFieldBegin('Id', TType::I32, 1);
      $xfer += $output->writeI32($this->Id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Areacode !== null) {
      $xfer += $output->writeFieldBegin('Areacode', TType::STRING, 2);
      $xfer += $output->writeString($this->Areacode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Country !== null) {
      $xfer += $output->writeFieldBegin('Country', TType::STRING, 3);
      $xfer += $output->writeString($this->Country);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Ext !== null) {
      $xfer += $output->writeFieldBegin('Ext', TType::STRING, 4);
      $xfer += $output->writeString($this->Ext);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Skin !== null) {
      $xfer += $output->writeFieldBegin('Skin', TType::STRING, 5);
      $xfer += $output->writeString($this->Skin);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MemberCountryList {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'List',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\MemberService\Model\MemberCountry',
        ),
      ),
    2 => array(
      'var' => 'PageSize',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    3 => array(
      'var' => 'OutCount',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    4 => array(
      'var' => 'Solid',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    5 => array(
      'var' => 'PageIndex',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    );

  /**
   * @var \MemberService\Model\MemberCountry[]
   */
  public $List = null;
  /**
   * @var int
   */
  public $PageSize = null;
  /**
   * @var int
   */
  public $OutCount = null;
  /**
   * @var bool
   */
  public $Solid = null;
  /**
   * @var int
   */
  public $PageIndex = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['List'])) {
        $this->List = $vals['List'];
      }
      if (isset($vals['PageSize'])) {
        $this->PageSize = $vals['PageSize'];
      }
      if (isset($vals['OutCount'])) {
        $this->OutCount = $vals['OutCount'];
      }
      if (isset($vals['Solid'])) {
        $this->Solid = $vals['Solid'];
      }
      if (isset($vals['PageIndex'])) {
        $this->PageIndex = $vals['PageIndex'];
      }
    }
  }

  public function getName() {
    return 'MemberCountryList';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->List = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $elem5 = new \MemberService\Model\MemberCountry();
              $xfer += $elem5->read($input);
              $this->List []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->PageSize);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->OutCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->Solid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->PageIndex);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MemberCountryList');
    if ($this->List !== null) {
      if (!is_array($this->List)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('List', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->List));
        {
          foreach ($this->List as $iter6)
          {
            $xfer += $iter6->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->PageSize !== null) {
      $xfer += $output->writeFieldBegin('PageSize', TType::I32, 2);
      $xfer += $output->writeI32($this->PageSize);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->OutCount !== null) {
      $xfer += $output->writeFieldBegin('OutCount', TType::I32, 3);
      $xfer += $output->writeI32($this->OutCount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Solid !== null) {
      $xfer += $output->writeFieldBegin('Solid', TType::BOOL, 4);
      $xfer += $output->writeBool($this->Solid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->PageIndex !== null) {
      $xfer += $output->writeFieldBegin('PageIndex', TType::I32, 5);
      $xfer += $output->writeI32($this->PageIndex);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MemberAuth {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'Id',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'MemberId',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    3 => array(
      'var' => 'AuthMold',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    4 => array(
      'var' => 'AuthStatus',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    5 => array(
      'var' => 'Name',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    6 => array(
      'var' => 'IdCardFile1',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    7 => array(
      'var' => 'IdCardFile2',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    8 => array(
      'var' => 'AddTime',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    9 => array(
      'var' => 'ProcessTime',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    10 => array(
      'var' => 'Remark',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    11 => array(
      'var' => 'Ext1',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    12 => array(
      'var' => 'Ext2',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    13 => array(
      'var' => 'IdCard',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    14 => array(
      'var' => 'FileExt1',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    15 => array(
      'var' => 'FileExt2',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var int
   */
  public $Id = null;
  /**
   * @var int
   */
  public $MemberId = null;
  /**
   * @var int
   */
  public $AuthMold = null;
  /**
   * @var int
   */
  public $AuthStatus = null;
  /**
   * @var string
   */
  public $Name = null;
  /**
   * @var string
   */
  public $IdCardFile1 = null;
  /**
   * @var string
   */
  public $IdCardFile2 = null;
  /**
   * @var int
   */
  public $AddTime = null;
  /**
   * @var int
   */
  public $ProcessTime = null;
  /**
   * @var string
   */
  public $Remark = null;
  /**
   * @var string
   */
  public $Ext1 = null;
  /**
   * @var string
   */
  public $Ext2 = null;
  /**
   * @var string
   */
  public $IdCard = null;
  /**
   * @var string
   */
  public $FileExt1 = null;
  /**
   * @var string
   */
  public $FileExt2 = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['Id'])) {
        $this->Id = $vals['Id'];
      }
      if (isset($vals['MemberId'])) {
        $this->MemberId = $vals['MemberId'];
      }
      if (isset($vals['AuthMold'])) {
        $this->AuthMold = $vals['AuthMold'];
      }
      if (isset($vals['AuthStatus'])) {
        $this->AuthStatus = $vals['AuthStatus'];
      }
      if (isset($vals['Name'])) {
        $this->Name = $vals['Name'];
      }
      if (isset($vals['IdCardFile1'])) {
        $this->IdCardFile1 = $vals['IdCardFile1'];
      }
      if (isset($vals['IdCardFile2'])) {
        $this->IdCardFile2 = $vals['IdCardFile2'];
      }
      if (isset($vals['AddTime'])) {
        $this->AddTime = $vals['AddTime'];
      }
      if (isset($vals['ProcessTime'])) {
        $this->ProcessTime = $vals['ProcessTime'];
      }
      if (isset($vals['Remark'])) {
        $this->Remark = $vals['Remark'];
      }
      if (isset($vals['Ext1'])) {
        $this->Ext1 = $vals['Ext1'];
      }
      if (isset($vals['Ext2'])) {
        $this->Ext2 = $vals['Ext2'];
      }
      if (isset($vals['IdCard'])) {
        $this->IdCard = $vals['IdCard'];
      }
      if (isset($vals['FileExt1'])) {
        $this->FileExt1 = $vals['FileExt1'];
      }
      if (isset($vals['FileExt2'])) {
        $this->FileExt2 = $vals['FileExt2'];
      }
    }
  }

  public function getName() {
    return 'MemberAuth';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->Id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->MemberId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->AuthMold);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->AuthStatus);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->Name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->IdCardFile1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->IdCardFile2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->AddTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->ProcessTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->Remark);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->Ext1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->Ext2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->IdCard);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->FileExt1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->FileExt2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MemberAuth');
    if ($this->Id !== null) {
      $xfer += $output->writeFieldBegin('Id', TType::I32, 1);
      $xfer += $output->writeI32($this->Id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->MemberId !== null) {
      $xfer += $output->writeFieldBegin('MemberId', TType::I32, 2);
      $xfer += $output->writeI32($this->MemberId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->AuthMold !== null) {
      $xfer += $output->writeFieldBegin('AuthMold', TType::I32, 3);
      $xfer += $output->writeI32($this->AuthMold);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->AuthStatus !== null) {
      $xfer += $output->writeFieldBegin('AuthStatus', TType::I32, 4);
      $xfer += $output->writeI32($this->AuthStatus);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Name !== null) {
      $xfer += $output->writeFieldBegin('Name', TType::STRING, 5);
      $xfer += $output->writeString($this->Name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->IdCardFile1 !== null) {
      $xfer += $output->writeFieldBegin('IdCardFile1', TType::STRING, 6);
      $xfer += $output->writeString($this->IdCardFile1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->IdCardFile2 !== null) {
      $xfer += $output->writeFieldBegin('IdCardFile2', TType::STRING, 7);
      $xfer += $output->writeString($this->IdCardFile2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->AddTime !== null) {
      $xfer += $output->writeFieldBegin('AddTime', TType::I64, 8);
      $xfer += $output->writeI64($this->AddTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ProcessTime !== null) {
      $xfer += $output->writeFieldBegin('ProcessTime', TType::I64, 9);
      $xfer += $output->writeI64($this->ProcessTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Remark !== null) {
      $xfer += $output->writeFieldBegin('Remark', TType::STRING, 10);
      $xfer += $output->writeString($this->Remark);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Ext1 !== null) {
      $xfer += $output->writeFieldBegin('Ext1', TType::STRING, 11);
      $xfer += $output->writeString($this->Ext1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Ext2 !== null) {
      $xfer += $output->writeFieldBegin('Ext2', TType::STRING, 12);
      $xfer += $output->writeString($this->Ext2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->IdCard !== null) {
      $xfer += $output->writeFieldBegin('IdCard', TType::STRING, 13);
      $xfer += $output->writeString($this->IdCard);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->FileExt1 !== null) {
      $xfer += $output->writeFieldBegin('FileExt1', TType::STRING, 14);
      $xfer += $output->writeString($this->FileExt1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->FileExt2 !== null) {
      $xfer += $output->writeFieldBegin('FileExt2', TType::STRING, 15);
      $xfer += $output->writeString($this->FileExt2);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class LoginResponse {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'Status',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'Msg',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'MemberId',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    );

  /**
   * @var int
   */
  public $Status = null;
  /**
   * @var string
   */
  public $Msg = null;
  /**
   * @var int
   */
  public $MemberId = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['Status'])) {
        $this->Status = $vals['Status'];
      }
      if (isset($vals['Msg'])) {
        $this->Msg = $vals['Msg'];
      }
      if (isset($vals['MemberId'])) {
        $this->MemberId = $vals['MemberId'];
      }
    }
  }

  public function getName() {
    return 'LoginResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->Status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->Msg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->MemberId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('LoginResponse');
    if ($this->Status !== null) {
      $xfer += $output->writeFieldBegin('Status', TType::I32, 1);
      $xfer += $output->writeI32($this->Status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Msg !== null) {
      $xfer += $output->writeFieldBegin('Msg', TType::STRING, 2);
      $xfer += $output->writeString($this->Msg);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->MemberId !== null) {
      $xfer += $output->writeFieldBegin('MemberId', TType::I32, 3);
      $xfer += $output->writeI32($this->MemberId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Words {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'Id',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'Word',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var int
   */
  public $Id = null;
  /**
   * @var string
   */
  public $Word = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['Id'])) {
        $this->Id = $vals['Id'];
      }
      if (isset($vals['Word'])) {
        $this->Word = $vals['Word'];
      }
    }
  }

  public function getName() {
    return 'Words';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->Id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->Word);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Words');
    if ($this->Id !== null) {
      $xfer += $output->writeFieldBegin('Id', TType::I32, 1);
      $xfer += $output->writeI32($this->Id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Word !== null) {
      $xfer += $output->writeFieldBegin('Word', TType::STRING, 2);
      $xfer += $output->writeString($this->Word);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MemberListReuslt {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'total',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'List',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\MemberService\Model\Members',
        ),
      ),
    );

  /**
   * @var int
   */
  public $total = null;
  /**
   * @var \MemberService\Model\Members[]
   */
  public $List = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['total'])) {
        $this->total = $vals['total'];
      }
      if (isset($vals['List'])) {
        $this->List = $vals['List'];
      }
    }
  }

  public function getName() {
    return 'MemberListReuslt';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->total);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->List = array();
            $_size7 = 0;
            $_etype10 = 0;
            $xfer += $input->readListBegin($_etype10, $_size7);
            for ($_i11 = 0; $_i11 < $_size7; ++$_i11)
            {
              $elem12 = null;
              $elem12 = new \MemberService\Model\Members();
              $xfer += $elem12->read($input);
              $this->List []= $elem12;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MemberListReuslt');
    if ($this->total !== null) {
      $xfer += $output->writeFieldBegin('total', TType::I32, 1);
      $xfer += $output->writeI32($this->total);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->List !== null) {
      if (!is_array($this->List)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('List', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRUCT, count($this->List));
        {
          foreach ($this->List as $iter13)
          {
            $xfer += $iter13->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Infomation {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'Id',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'memberid',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    3 => array(
      'var' => 'Context',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'Title',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'AddTime',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    6 => array(
      'var' => 'GetTime',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    );

  /**
   * @var int
   */
  public $Id = null;
  /**
   * @var int
   */
  public $memberid = null;
  /**
   * @var string
   */
  public $Context = null;
  /**
   * @var string
   */
  public $Title = null;
  /**
   * @var int
   */
  public $AddTime = null;
  /**
   * @var int
   */
  public $GetTime = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['Id'])) {
        $this->Id = $vals['Id'];
      }
      if (isset($vals['memberid'])) {
        $this->memberid = $vals['memberid'];
      }
      if (isset($vals['Context'])) {
        $this->Context = $vals['Context'];
      }
      if (isset($vals['Title'])) {
        $this->Title = $vals['Title'];
      }
      if (isset($vals['AddTime'])) {
        $this->AddTime = $vals['AddTime'];
      }
      if (isset($vals['GetTime'])) {
        $this->GetTime = $vals['GetTime'];
      }
    }
  }

  public function getName() {
    return 'Infomation';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->Id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->memberid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->Context);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->Title);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->AddTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->GetTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Infomation');
    if ($this->Id !== null) {
      $xfer += $output->writeFieldBegin('Id', TType::I32, 1);
      $xfer += $output->writeI32($this->Id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->memberid !== null) {
      $xfer += $output->writeFieldBegin('memberid', TType::I32, 2);
      $xfer += $output->writeI32($this->memberid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Context !== null) {
      $xfer += $output->writeFieldBegin('Context', TType::STRING, 3);
      $xfer += $output->writeString($this->Context);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Title !== null) {
      $xfer += $output->writeFieldBegin('Title', TType::STRING, 4);
      $xfer += $output->writeString($this->Title);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->AddTime !== null) {
      $xfer += $output->writeFieldBegin('AddTime', TType::I64, 5);
      $xfer += $output->writeI64($this->AddTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->GetTime !== null) {
      $xfer += $output->writeFieldBegin('GetTime', TType::I64, 6);
      $xfer += $output->writeI64($this->GetTime);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class InfomationList {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'List',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\MemberService\Model\Infomation',
        ),
      ),
    2 => array(
      'var' => 'count',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    );

  /**
   * @var \MemberService\Model\Infomation[]
   */
  public $List = null;
  /**
   * @var int
   */
  public $count = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['List'])) {
        $this->List = $vals['List'];
      }
      if (isset($vals['count'])) {
        $this->count = $vals['count'];
      }
    }
  }

  public function getName() {
    return 'InfomationList';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->List = array();
            $_size14 = 0;
            $_etype17 = 0;
            $xfer += $input->readListBegin($_etype17, $_size14);
            for ($_i18 = 0; $_i18 < $_size14; ++$_i18)
            {
              $elem19 = null;
              $elem19 = new \MemberService\Model\Infomation();
              $xfer += $elem19->read($input);
              $this->List []= $elem19;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->count);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('InfomationList');
    if ($this->List !== null) {
      if (!is_array($this->List)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('List', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->List));
        {
          foreach ($this->List as $iter20)
          {
            $xfer += $iter20->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->count !== null) {
      $xfer += $output->writeFieldBegin('count', TType::I32, 2);
      $xfer += $output->writeI32($this->count);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Advert {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'Id',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'Title',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'Image',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'AppImage',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'Url',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    6 => array(
      'var' => 'IsNewPage',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    );

  /**
   * @var int
   */
  public $Id = null;
  /**
   * @var string
   */
  public $Title = null;
  /**
   * @var string
   */
  public $Image = null;
  /**
   * @var string
   */
  public $AppImage = null;
  /**
   * @var string
   */
  public $Url = null;
  /**
   * @var bool
   */
  public $IsNewPage = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['Id'])) {
        $this->Id = $vals['Id'];
      }
      if (isset($vals['Title'])) {
        $this->Title = $vals['Title'];
      }
      if (isset($vals['Image'])) {
        $this->Image = $vals['Image'];
      }
      if (isset($vals['AppImage'])) {
        $this->AppImage = $vals['AppImage'];
      }
      if (isset($vals['Url'])) {
        $this->Url = $vals['Url'];
      }
      if (isset($vals['IsNewPage'])) {
        $this->IsNewPage = $vals['IsNewPage'];
      }
    }
  }

  public function getName() {
    return 'Advert';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->Id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->Title);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->Image);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->AppImage);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->Url);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->IsNewPage);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Advert');
    if ($this->Id !== null) {
      $xfer += $output->writeFieldBegin('Id', TType::I32, 1);
      $xfer += $output->writeI32($this->Id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Title !== null) {
      $xfer += $output->writeFieldBegin('Title', TType::STRING, 2);
      $xfer += $output->writeString($this->Title);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Image !== null) {
      $xfer += $output->writeFieldBegin('Image', TType::STRING, 3);
      $xfer += $output->writeString($this->Image);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->AppImage !== null) {
      $xfer += $output->writeFieldBegin('AppImage', TType::STRING, 4);
      $xfer += $output->writeString($this->AppImage);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Url !== null) {
      $xfer += $output->writeFieldBegin('Url', TType::STRING, 5);
      $xfer += $output->writeString($this->Url);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->IsNewPage !== null) {
      $xfer += $output->writeFieldBegin('IsNewPage', TType::BOOL, 6);
      $xfer += $output->writeBool($this->IsNewPage);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Notice {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'id',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'Title',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'html',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'Time',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'IsEssence',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    6 => array(
      'var' => 'IsApp',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    7 => array(
      'var' => 'Sort',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    );

  /**
   * @var int
   */
  public $id = null;
  /**
   * @var string
   */
  public $Title = null;
  /**
   * @var string
   */
  public $html = null;
  /**
   * @var string
   */
  public $Time = null;
  /**
   * @var bool
   */
  public $IsEssence = null;
  /**
   * @var int
   */
  public $IsApp = null;
  /**
   * @var int
   */
  public $Sort = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['Title'])) {
        $this->Title = $vals['Title'];
      }
      if (isset($vals['html'])) {
        $this->html = $vals['html'];
      }
      if (isset($vals['Time'])) {
        $this->Time = $vals['Time'];
      }
      if (isset($vals['IsEssence'])) {
        $this->IsEssence = $vals['IsEssence'];
      }
      if (isset($vals['IsApp'])) {
        $this->IsApp = $vals['IsApp'];
      }
      if (isset($vals['Sort'])) {
        $this->Sort = $vals['Sort'];
      }
    }
  }

  public function getName() {
    return 'Notice';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->Title);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->html);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->Time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->IsEssence);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->IsApp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->Sort);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Notice');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I32, 1);
      $xfer += $output->writeI32($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Title !== null) {
      $xfer += $output->writeFieldBegin('Title', TType::STRING, 2);
      $xfer += $output->writeString($this->Title);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->html !== null) {
      $xfer += $output->writeFieldBegin('html', TType::STRING, 3);
      $xfer += $output->writeString($this->html);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Time !== null) {
      $xfer += $output->writeFieldBegin('Time', TType::STRING, 4);
      $xfer += $output->writeString($this->Time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->IsEssence !== null) {
      $xfer += $output->writeFieldBegin('IsEssence', TType::BOOL, 5);
      $xfer += $output->writeBool($this->IsEssence);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->IsApp !== null) {
      $xfer += $output->writeFieldBegin('IsApp', TType::I32, 6);
      $xfer += $output->writeI32($this->IsApp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Sort !== null) {
      $xfer += $output->writeFieldBegin('Sort', TType::I32, 7);
      $xfer += $output->writeI32($this->Sort);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


